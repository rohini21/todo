/*
Hold all the plugins.
*/
pluginsHelper = {
  plugins: [],
  registerPlugin: function(name, plugin) {
    var obj   = {};
    obj[name] = plugin;
    this.plugins.push(obj);
  }
}

var R                  = require('ramda');
var rawOptions         = require('../config');
var ACL                = require('./acl');
var utility            = require('./utilities/utility');
var App                = require('./app');
var Loc                = require('./location');
var defaultOptions     = R.mixin({}, rawOptions);
var Events             = require('./events');
var Presence           = require('./presence');
var Constants          = require('./constants');
defaultOptions.adaptor = require('./adaptors/RestfullAdaptor');
/**
  The Built module acts as the entry point for the SDK.
  @namespace Built
*/

/*
String constants
*/

var RestfullAdaptor = './adaptors/RestfullAdaptor';
var SocketAdaptor   = './adaptors/SocketAdaptor';

/*
  Plugins map
*/

/**
  Set of allowed session values
  @memberof Built
  @enum {String}
  @example
  var app = Built.App('api_key').persistSessionWith(Built.Session.COOKIE);
*/
var Session = {
  /** Set cookie as the storage medium to maintain session */
   COOKIE         : 'COOKIE',
  /** Set HTML 5 local storage as the storage medium to maintain session */
   LOCAL_STORAGE  : 'LOCAL_STORAGE',
  /** No session would be maintained */
   NONE           : 'NONE'
}

/**
  Constants for system classes names on built.io
  @memberof Built
  @enum {String}
  @example
  var app = Built.App('api_key').persistSessionWith(Built.Session.COOKIE);
*/
var Constants = {
  /** Class name for application-user class on built.io*/
   APPLICATION_USER      : Constants.APP_USER_CLS,
  /** Class name for application-user-role class on built.io */
   APPLICATION_USER_ROLE : Constants.APP_ROLE_CLS,
   /** Class name for installation class on built.io */
   INSTALLATION          : Constants.APP_INSTALLATION_CLS
}

/**
  Set of allowed cache policies
  @memberof Built
  @enum {String}
  @example
  var app = Built.App('api_key').setCachePolicy(Built.CachePolicy.CACHE_ELSE_NETWORK);
*/
var CachePolicy = {
  /**  Set the cache policy to get data from network only (Default). */
  ONLY_NETWORK        : 'ONLY_NETWORK',
  /**  It will try to first get the data from cache. On failure would make a network call. */
  CACHE_ELSE_NETWORK  : 'CACHE_ELSE_NETWORK',
  /**  It will try to make a network call. On failure would fetch it from cache.*/
  NETWORK_ELSE_CACHE  : 'NETWORK_ELSE_CACHE',
  /**  Get data from both cache and network. */
  CACHE_THEN_NETWORK  : 'CACHE_THEN_NETWORK'
}

/**
  set of avaliable adaptors that can be used.
  @memberof Built
  @enum {String}
  @example
  var app = Built.App('api_key').setAdaptor(Built.Adaptor.SOCKET);
*/
var Adaptor = {
  /** All request to built.io would be done using HTTP protocol */
  HTTP    : RestfullAdaptor,
  /** A socket connection would be established with built.io */
  SOCKET  : SocketAdaptor
}

module.exports.Constants     = Constants;

module.exports.Session       = Session;

module.exports.CachePolicy   = CachePolicy;

module.exports.Adaptor       = Adaptor;
                                                 

/**
  @name App
  Represents a {@link App}
*/
module.exports.App       = App(defaultOptions),
/**
  @name ACL
  Represents a {@link ACL}
*/
module.exports.ACL       = utility.wrapper(ACL,[{}]),
/**
  @name Location
  Represents an {@link Location}
*/
module.exports.Location  = utility.wrapper(Loc,["",""]),
/**
  @name Events
  {@link Events} raised on this application. For example an event is raised every time a http request is fired.
*/
module.exports.Events    = Events,
/**
  @name Presence
  {@link Presence} details of User.
*/
module.exports.Presence  = utility.wrapper(Presence,[{}])


utility.copyProperties(module.exports.ACL      , ACL);
// utility.copyProperties(module.exports          , module.exports);
utility.copyProperties(module.exports.App      , App);
utility.copyProperties(module.exports.Location , Loc);
utility.copyProperties(module.exports.Presence , Presence);