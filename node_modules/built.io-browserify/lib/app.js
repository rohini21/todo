var R                     = require('ramda');
var rawOptions            = require('../config');
var Cls                   = require('./class');
var Upload                = require('./upload');
var utility               = require('./utilities/utility');
var User                  = require('./user');
var instanceMethodBuilder = require('./utilities/instanceMethodBuilder')();
var Built                 = require('./built');
var Role                  = require('./role');
var Notification          = require('./notifications');
var Installation          = require('./installation');
var Extension             = require('./extension');
var Analytics_Event       = require('./analytics');
var cookie                = require('./session/cookie');
var local_storage         = require('./session/local_storage');
var constants             = require('./constants');
var when                  = require('when');
var restfullAdaptor       = require('./adaptors/RestfullAdaptor');
var socketAdaptor         = require('./adaptors/SocketAdaptor');
require('./realtime'); // This is so that realtime is included by browserify while browserifying
/*
Constants
*/
var BASE_COOKIE_NAME = "bauthtoken";

/**
    @class App
    @classdesc
    Represents an application
    @instance
    @param {String} apiKey The api key of app on built.io
    @description Use this constructor to get an instance of App
    @example
    var app = Built.App('api_key');
*/
var appCons = module.exports = R.curry(function(options, apiKey) { //app Constructor
  var app            = {};
  var persistSession = Built.Session[options.persistSession];
  
  if(!utility.isBrowser())
    persistSession = 'NONE';

  if (options.headers !== undefined) { // User already has a App and is using the same to create a new one

    app['options'] = options;

  } else {
    app['options'] = consOptions(
      options.host, 
      options.port,
      options.protocol, 
      options.rtHost,
      options.rtPort,
      options.rtProtocol, 
      options.version, 
      options.adaptor, 
      authtokenAndApiKeyHeaderWrap(options, apiKey), 
      persistSession, 
      Built.CachePolicy[options.cachePolicy], 
      options.app_info, 
      options.event_properties, 
      options.socketData, 
      options.isSessionUpdated,
      options.userJSON
    );
  }
  /** 
    @memberof App
    @name Class
    @description
      Represents a {@link Class}.
  */
  app.Class                = Cls(app,{},{});
  utility.copyProperties(app.Class,Cls);

  var appClsCurriedUser    = User(app,app.Class(constants.APP_USER_CLS));
  var curriedUser          = User(app,app.Class(constants.APP_USER_CLS),{},{},{});
  var curriedRole          = Role(app,app.Class(constants.APP_ROLE_CLS),{},{},{});
  var curriedInstallation  = Installation(app,app.Class(constants.APP_INSTALLATION_CLS),{},{},{});
  var curriedNotification  = Notification(app,{});
  var curriedUpload        = Upload(app,{},{});
  var curriedEvent         = Analytics_Event(app,{});
  var curriedExecute       = Extension.execute(app);

  /*
    Upload constructor is curried only with app instance only as required in realtime
  */
  var appCurriedUpload     = Upload(app);
  /** 
    @memberof App
    @name User
    @description
      Represents a {@link User}.
  */
  app.User                      = utility.wrapper(curriedUser,[{}]);
  utility.copyProperties(app.User     ,User);
  app.User.isAuthenticated      = User.isAuthenticated(app);
  app.User.getSession           = User.getSession(app);
  app.User.setSession           = User.setSession(app);
  app.User.clearSession         = User.clearSession(app);
  app.User.generateAuthtoken    = User.generateAuthtoken(app);
  app.User.anyAuth              = User.anyAuth(app);
  /** 
    @memberof App
    @name Upload
    @description
      Represents a {@link Upload}
  */
  app.Upload = utility.wrapper(curriedUpload,[{}]);
  utility.copyProperties(app.Upload ,Upload);

  app.UploadCons = utility.wrapper(appCurriedUpload,[{},{},{}]);
  utility.copyProperties(app.UploadCons ,Upload);
  /** 
    @memberof App
    @name Role
    @description
      Represents a {@link Role}
  */
  app.Role = utility.wrapper(curriedRole,[{}]);
  utility.copyProperties(app.Role ,Role);
  app.Role.getRoleQuery = app.Role.getRoleQuery(app); 
  /** 
    @memberof App
    @name Notification
    @description
      Represents a {@link Notification}
  */
  app.Notification = utility.wrapper(curriedNotification,[{}]);
  utility.copyProperties(app.Notification,Notification);
  /** 
    @memberof App
    @name Installation
    @description
      Represents a {@link Installation}
  */
  app.Installation = utility.wrapper(curriedInstallation,[{}]);
  utility.copyProperties(app.Installation,Installation);
  /** 
    @memberof App
    @name Extension
    @description
      Represents a {@link Extension}
  */
  app.Extension           = {};
  app.Extension.execute   = utility.wrapper(curriedExecute,[null,null]);
  /** 
    @memberof App
    @name Analytics
    @throws new Error("Uid not found")
    @description
      Represents analytics on built.io 
    @example
      var event = Built.App('api_key').Analytics.Event('event_name'); //Returns an instance of a Event
  */
  app.Analytics           = {};
  app.Analytics.Event     = function(uid,properties){
    if(!uid)
      throw new Error("Uid not found");
    if(properties){
      return curriedEvent(uid,properties);
    }else{
      return curriedEvent(uid,{});
    }
  }
  utility.copyProperties(app.Analytics.Event ,Analytics_Event);

  installPluginsOnInst(app);
  installPluginsOnCons(app);
  return instanceMethodBuilder.build(module.exports,app);
});

/*
  pluginsHelper is global variable declared in built.js
*/
function installPluginsOnInst(app){
  pluginsHelper.plugins.map(function(plugin){
    if(plugin.realtime && plugin.realtime.onAppInstance){
      plugin.realtime.onAppInstance(app);
    }
  });
};

function installPluginsOnCons(app){
  pluginsHelper.plugins.map(function(plugin){
    if(plugin.realtime && plugin.realtime.onClassCons){
      plugin.realtime.onClassCons(app);
    }
    if(plugin.realtime && plugin.realtime.onUploadCons){
      plugin.realtime.onUploadCons(app);
    }
    if(plugin.realtime && plugin.realtime.onUserCons){
     plugin.realtime.onUserCons(app); 
    }
    if(plugin.realtime && plugin.realtime.onRoleCons){
     plugin.realtime.onRoleCons(app); 
    }
    if(plugin.realtime && plugin.realtime.onInstallationCons){
     plugin.realtime.onInstallationCons(app); 
    }
  });
}

var consOptions = module.exports.consOptions = R.curry(function(host, port, protocol, rtHost, rtPort, rtProtocol, version, adaptor, headers, persistSession, cachePolicy, app_info, event_properties, socketData, isSessionUpdated, userJSON) { //options Constructor
  return {
    host             : host,
    port             : port,
    protocol         : protocol,
    rtHost           : rtHost,
    rtPort           : rtPort,
    rtProtocol       : rtProtocol,
    version          : version,
    adaptor          : adaptor,
    headers          : headers,
    persistSession   : persistSession,
    cachePolicy      : cachePolicy,
    app_info         : app_info,
    event_properties : event_properties, 
    socketData       : socketData,
    isSessionUpdated : isSessionUpdated,
    userJSON         : userJSON    
  }
});

var setAppOptions = module.exports.setAppOptions = function(parameter,value,existingOptions){ 
  var host              = existingOptions.host;
  var port              = existingOptions.port;
  var protocol          = existingOptions.protocol;
  var rtHost            = existingOptions.rtHost;
  var rtPort            = existingOptions.rtPort;
  var rtProtocol        = existingOptions.rtProtocol;
  var version           = existingOptions.version;
  var adaptor           = existingOptions.adaptor;
  var headers           = existingOptions.headers;
  var persistSession    = existingOptions.persistSession;
  var cachePolicy       = existingOptions.cachePolicy;
  var app_info          = existingOptions.app_info;
  var event_properties  = existingOptions.event_properties;
  var socketData        = existingOptions.socketData;
  var isSessionUpdated  = existingOptions.isSessionUpdated;
  var userJSON          = existingOptions.userJSON;
  switch(parameter){
    case "host":
      host = value;
      break;
    case "port":
      port = value;
      break;
    case "protocol":
      protocol = value;
      break;
    case "rtHost":
      rtHost = value;
      break;
    case "rtPort":
      rtPort = value;
      break;
    case "rtProtocol":
      rtProtocol = value;
      break;
    case "version":
      version = value;
      break;
    case "adaptor":
      adaptor = value;
      break;
    case "headers":
      headers = value;
      break;
    case "persistSession":
      persistSession = value;
      break;
    case "cachePolicy":
      cachePolicy = value;
      break;
    case "app_info":
      app_info = value;
      break;
    case "event_properties":
      event_properties = value;
      break;
    case  "socketData":
      socketData = value; 
    break;
    case  "isSessionUpdated":
      isSessionUpdated = value; 
    break;
    case "userJSON":
      userJSON = value;
    break;
  }
  return consOptions(host, port, protocol, rtHost, rtPort, rtProtocol, version, adaptor, headers , persistSession, cachePolicy, app_info, event_properties, socketData, isSessionUpdated, userJSON);
}

var getOptions = module.exports.getOptions = R.prop('options');
instanceMethodBuilder.define('getOptions',1);


var getOption = module.exports.getOption = function(config, app){
  return R.prop(config, getOptions(app));
}
instanceMethodBuilder.define('getOption', 2);

var setOptions = module.exports.setOptions = R.curry(function(options, app) {
  return appCons(options, getApiKey(app))
});
instanceMethodBuilder.define('setOptions', 2);

module.exports.setSession = function(userJSON,app){
  if(!userJSON.authtoken){
    throw new Error("Authtoken not found in JSON");
  }
  app.setAuthToken(userJSON.authtoken); // sequence matters as setAuthToken clears previous userJSON if any exists
  app.setUserJSON(userJSON);
  if(utility.isBrowser()){
    persistSessionInBrowser(userJSON,app); 
  }
  Built.Events.trigger('user:save-session');
  return app;
};
instanceMethodBuilder.define('setSession',2);

function persistSessionInBrowser (userJSON,app) {
  if(Built.Session.COOKIE === getOptions(app).persistSession){
    cookie.set(generateSessionKey(getApiKey(app)),userJSON.authtoken);
  }else if(Built.Session.LOCAL_STORAGE === getOptions(app).persistSession){
    local_storage.set(generateSessionKey(getApiKey(app)),userJSON);
  }
}

module.exports.clearSession = function(app){
  app.setUserJSON(null);
  app.removeAuthToken();
  if(utility.isBrowser()){
    if(Built.Session.COOKIE === getOptions(app).persistSession){
      cookie.delete(generateSessionKey(getApiKey(app)));
    }else if(Built.Session.LOCAL_STORAGE === getOptions(app).persistSession){
      local_storage.delete(generateSessionKey(getApiKey(app)));
    }
  }
  Built.Events.trigger('user:clear-session');
  return app;
};
instanceMethodBuilder.define('clearSession',1);

module.exports.getSession = function(forceFetch, app){
  var persistSession = getOptions(app).persistSession;
  //Localstorage session is not being updated so we need to force fetch the session for the first time
  if(!app.isSessionUpdated() || persistSession === Built.Session.NONE) 
    forceFetch = true;
  if(forceFetch){
    app.setSessionUpdate(true);
    return getSessionHelper(app);
  }
  var userJSON = app.getUserJSON();
  if(userJSON){
    return when(wrapInUserObject(userJSON, app));
  }
  if(persistSession === Built.Session.COOKIE){
    app = app.setAuthToken(cookie.get(generateSessionKey(getApiKey(app)))); // retrieves authtoken from Cookie and sets it app.
    return getSessionHelper(app);
  }else if(persistSession === Built.Session.LOCAL_STORAGE){    // forceFetch should be false and option should be local storage
    var deferred = when.defer();
    var data = local_storage.get(generateSessionKey(getApiKey(app)));
    if(data)
      deferred.resolve(app.Class(constants.APP_USER_CLS).ObjectCons({},{},data,{}));
    else
      deferred.reject();
    return deferred.promise;
  }
}
instanceMethodBuilder.define('getSession',2,[false]);

function getSessionHelper(app){
  var requestObject = utility.getAdaptorObj('GET',module.exports.getURL(app)+'/application/users/current', module.exports.getHeaders(app),null,null);
  return makeCallHelper(app, requestObject).then(function(user){
    app.setSession(user.toJSON());
    return user;
  });
}

module.exports.generateAuthtoken =function(query,upsert,updateObject,app){
  if(!R.prop('master_key',module.exports.getHeaders(app)))
    throw new Error('Master key not found in headers');
  if(!utility.isQueryInstance(query))
    throw new Error('Query instance inappropriate');
  if(!utility.isBoolean(upsert))
    throw new Error('Upsert argument should be a boolean value');
  if(!utility.isObject(updateObject))
    throw new Error('Update object inappropriate');
  var entity = {
    "insert"          : upsert ,
    "query"           : query.getQueryObj(),
    "application_user": updateObject
  };
  var requestObject = utility.getAdaptorObj('POST', module.exports.getURL(app) + '/application/users/generate_authtoken', module.exports.getHeaders(app), entity, null); 
  return makeCallHelper(app,requestObject);
} 
instanceMethodBuilder.define('generateAuthtoken',4);

function makeCallHelper(app, requestObject) {
  var adaptor = app.options.adaptor;
  return adaptor.makeCall(requestObject)
    .then(function(response) {
      var user = wrapInUserObject(response.entity.application_user, app);
      app.setSession(user.toJSON()); // Set the session with new user data
      return user;
    });
}

function wrapInUserObject(object, app){
  return wrapInObject(constants.APP_USER_CLS, object, app);
}

function wrapInObject(classUid, object, app){
  return app.Class(classUid).ObjectCons({}, {}, object, {});
}
module.exports.anyAuth = function(fnName, reqBody, reqHeaders, app){
  return app.Extension.execute(fnName, reqBody, reqHeaders)
    .then(function(response){
      var user = app.Class(constants.APP_USER_CLS).ObjectCons({}, {}, response.application_user, {});
      app.setSession(user.toJSON()); // Set the session with new user data
      return user;
    });
}
instanceMethodBuilder.define('anyAuth',4);
/**
  Sets authentication token in app header
  @memberof App
  @function setAuthToken
  @param {String} authtoken The authentication token
  @instance
  @example
  var app = Built.App('api_key').setAuthToken('abc123'); // sets authtoken abc123 in app headers
  @return {App}
*/
var setAuthToken = module.exports.setAuthToken = R.curry(function(authtoken,app){
  var existingHeaders           = getHeaders(app);
  existingHeaders['authtoken']  = authtoken;
  app.getOptions().userJSON      = null; // previous userJSON object becomes invalid for this new authtoken
  return app;
});
instanceMethodBuilder.define('setAuthToken',2);

module.exports.setUserJSON = R.curry(function(userJSON,app){
  var newOptions = setAppOptions('userJSON', userJSON, getOptions(app));
  app.options    = newOptions;
  return app;
});
instanceMethodBuilder.define('setUserJSON',2);

module.exports.getUserJSON = function (app) {
  return app.getOption('userJSON');
}
instanceMethodBuilder.define('getUserJSON',1);

/**
  Returns authtoken used by the App instance for authentication.
  @memberof App
  @function getAuthToken
  @instance
  @example
  var authtoken = Built.App('api_key').getAuthToken() // Returns authtoken
  @return String
*/
module.exports.getAuthToken = function(app){
  return getHeaders(app).authtoken;
}
instanceMethodBuilder.define('getAuthToken',1);
/**
  Removes authentication token from app header
  @memberof App
  @function removeAuthToken
  @instance
  @example
  var app = Built.App('api_key').removeAuthToken() // Removes authtoken from app headers
  @return {App}
*/
module.exports.removeAuthToken = function(app){
  var existingHeaders           = getHeaders(app);
  delete existingHeaders['authtoken'];
  return app;
};
instanceMethodBuilder.define('removeAuthToken',1);


var isAuthenticated = module.exports.isAuthenticated = function(app){
  return !!getHeaders(app).authtoken;
}
instanceMethodBuilder.define('isAuthenticated',1);

/**
  Sets the storage medium which should be used to maintain session
  @memberof App
  @function persistSessionWith
  @param {Constant} persistSession Built persistance constant
  @instance
  @example
  var app = Built.App('api_key').persistSessionWith(Built.Session.COOKIE); // Returns a app which would use cookie to persist sessions
  @return {App}
*/
module.exports.persistSessionWith = R.curry(function(persistSession,app){
    if(persistSession === Built.Session.LOCAL_STORAGE && !localStorageEnabled()){
      persistSession = Built.Session.COOKIE;
    }
    var existingOptions = getOptions(app);
    var newOptions      = setAppOptions('persistSession', persistSession, existingOptions);
    var newHeader       = R.mixin(authtokenAndApiKeyHeaderWrap(newOptions,app.getApiKey(app)),existingOptions.headers);
    newOptions          = setAppOptions('headers',newHeader,newOptions);
    return setOptions(newOptions, app);
});
instanceMethodBuilder.define('persistSessionWith',2);

function localStorageEnabled() {
  try {
    if (!window.localStorage) {
      throw new Error("Local Storage doesn't exist");
    }
    local_storage.set('builttestkey', 'value');
    local_storage.get('builttestkey');
    local_storage.delete('builttestkey');
    return true;
  } catch (err) {
    console.warn("Local storage was downgraded to cookie",err);
    return false;
  }
}

var validateCachePolicy = module.exports.validateCachePolicy = function(policy,app){
  return !!Built.CachePolicy[policy];
}
instanceMethodBuilder.define('validateCachePolicy',2);
/**
  Sets the cache policy to be used by the app
  @memberof App
  @function setCachePolicy
  @param {Constant} cachePolicy Cache Policy to be used by the application
  @instance
  @example
  var app = Built.App('api_key').setCachePolicy(Built.CachePolicy.CACHE_ELSE_NETWORK); //Returns a app which would use CACHE_ELSE_NETWORK as its cache policy
  @return {App}
*/
module.exports.setCachePolicy = R.curry(function(cachePolicy,app){
  if(app.validateCachePolicy(cachePolicy)){
    var existingOptions = getOptions(app);
    var newOptions      = setAppOptions('cachePolicy',cachePolicy,existingOptions);
    var ret             = setOptions(newOptions, app);
    return setOptions(newOptions, app);
  }
  else
    throw new Error('Invalid cache policy');
});
instanceMethodBuilder.define('setCachePolicy',2);

/**
  Returns which cache policy is being followed by the app instance
  @memberof App
  @function getCachePolicy
  @instance
  @example
    Built.App('api_key').getCachePolicy() === Built.CachePolicy.CACHE_ELSE_NETWORK.
  @return {String}
*/

module.exports.getCachePolicy = function(app){
  return getOptions(app).cachePolicy;
};
instanceMethodBuilder.define('getCachePolicy',1);

/**
  Set a header for an application
  @memberof App
  @function setHeader
  @param {String} header The header key
  @param {String} value The header value
  @instance
  @example
    var app = Built.App('api_key').setHeader('My-Custom-Header','MyValue'); //Sets a header and returns a app instance
  @return {App}
*/
var setHeader = module.exports.setHeader = R.curry(function(header, value, app) { //setHeader
  var existingOptions = getOptions(app);
  var newHeader       = R.mixin({}, existingOptions.headers);
  newHeader[header]   = value;
  var newOptions      = setAppOptions('headers',newHeader,existingOptions);
  return setOptions(newOptions, app);
});
instanceMethodBuilder.define('setHeader',3);
/**
  Removes a header from this application.
  @memberof App
  @function removeHeader
  @param {String} header The header key that needs to be removed
  @instance
  @example
  var app = Built.App('api_key').removeHeader('abc'); //Removes header abc and returns a new app instance
  @return {App}
*/

var removeHeader = module.exports.removeHeader = R.curry(function(header, app) {
  var existingOptions = getOptions(app);
  var newHeader       = R.mixin({}, existingOptions.headers);
  delete newHeader[header];
  var newOptions      = setAppOptions('headers',newHeader,existingOptions);
  return setOptions(newOptions, app);
});
instanceMethodBuilder.define('removeHeader',2);
/**
  Changes the host config
  @memberof App
  @function setHost
  @param {String} host The host 
  @instance
  @example
  var app = Built.App('api_key').setHost('api.abc.io'); //Changes the host to 'api.abc.io' and returns a new app instance
  @return {App}
*/
/*
  Calls the option constructor with the new host name and passing the result to app constructor
*/
module.exports.setHost = R.curry(function(host, app) {
  var existingOptions = getOptions(app);
  var newOptions      = setAppOptions('host',host,existingOptions);
  return setOptions(newOptions, app);
});
instanceMethodBuilder.define('setHost',2);

var changeRtOptions   = R.curry(function(key, value ,app){
  var existingOptions = getOptions(app);
  var newOptions      = setAppOptions(key, value, existingOptions);
  return setOptions(newOptions, app);
});

/**
  Use this method to change the host URL that should be used for realtime connection.
  @memberof App
  @function setRtHost
  @param {String} host The host 
  @instance
  @example
  var app = Built.App('api_key').setRtHost('api.abc.io'); //Changes the host to 'api.abc.io' and returns a new app instance
  @return {App}
*/
module.exports.setRtHost = changeRtOptions('rtHost');
instanceMethodBuilder.define('setRtHost',2);

/**
  Changes the port config
  @memberof App
  @function setPort
  @param {String} port The port number
  @instance
  @example
  var app = Built.App('api_key').setPort(8070); // Changes the port number to '8070' and returns new app instance
  @return {App}
*/
module.exports.setPort = R.curry(function(port, app) {
  if (typeof port !== 'number') {
    throw new Error('Port number should be number');
  }
  var existingOptions = getOptions(app);
  var newOptions      = setAppOptions('port',port,existingOptions);
  return setOptions(newOptions, app);
});
instanceMethodBuilder.define('setPort',2);

/**
  Changes the port number to be used for realtime connection
  @memberof App
  @function setRtPort
  @param {String} port The port number
  @instance
  @example
  var app = Built.App('api_key').setRtPort(8070); // Changes the port number to '8070' and returns new app instance
  @return {App}
*/
module.exports.setRtPort = R.curry(function(port, app){
  if (typeof port !== 'number') {
    throw new Error('Port number should be number');
  }
  return changeRtOptions('rtPort', port, app);
});
instanceMethodBuilder.define('setRtPort',2);

/**
  Changes the protocol to be used
  @memberof App
  @function setProtocol
  @param {String} protocol The protocol to be used (Protocol should be http/https)
  @instance
  @example
  var app = Built.App('api_key').setProtocol('http') // Sets protocol to be http and returns new app instance
  @return {App}
*/
module.exports.setProtocol = R.curry(function(protocol, app) {
  if (protocol !== 'http' && protocol !== 'https') {
    throw new Error('Supported protocols are http and https');
  }
  var existingOptions = getOptions(app);
  var newOptions      = setAppOptions('protocol',protocol,existingOptions);
  return setOptions(newOptions, app);
});
instanceMethodBuilder.define('setProtocol',2);

/**
  Use this method to change the protocol that should be used for realtime connection.
  @memberof App
  @function setRtProtocol
  @param {String} port The port number 
  @instance
  @example
  var app = Built.App('api_key').setRtProtocol('http'); //Changes the host to 'api.abc.io' and returns a new app instance
  @return {App}
*/
module.exports.setRtProtocol = R.curry(function(protocol, app) {
  if (protocol !== 'http' && protocol !== 'https') {
    throw new Error('Supported protocols are http and https');
  }
  return changeRtOptions('rtProtocol', protocol, app);
});
instanceMethodBuilder.define('setRtProtocol', 2);

/**
  Set the master key for an application
  @memberof App
  @function setMasterKey
  @param {String} masterKey The master key value
  @instance
  @example
  var app = Built.App('api_key').setMasterKey('abcxyz');
  @return {App}
*/
module.exports.setMasterKey = setHeader('master_key')
instanceMethodBuilder.define('setMasterKey',2);

/**
  Gets the master key for an application
  @memberof App
  @function getMasterKey
  @instance
  @example
  var app = Built.App('api_key').setMasterKey('abcxyz');
  console.log(app.getMasterKey());
  @return {App}
*/
module.exports.getMasterKey = function(app){
  return app.getHeaders().master_key;
}
instanceMethodBuilder.define('getMasterKey',1);
/**
  Sets the current tenant for this application
  @memberof App
  @function setTenant
  @param {String} tenantUid The tenant uid value 
  @instance
  @example
  var app = Built.App('api_key').setTenant('abcxyz');
  @return {App}
*/
module.exports.setTenant = setHeader('tenant_uid')
instanceMethodBuilder.define('setTenant',2);
/**
  Removes the master key from application
  @memberof App
  @instance
  @function removeMasterKey
  @instance
  @example
  var app = Built.App('api_key').removeMasterKey(); 
  @return {App}
 */

module.exports.removeMasterKey = removeHeader('master_key');
instanceMethodBuilder.define('removeMasterKey',2);
/**
  Removes the tenant from application
  @memberof App
  @function removeTenant
  @instance
  @example
  var app = Built.App('api_key').removeTenant();
  @return {App}
 */

module.exports.removeTenant = removeHeader('tenant_uid');
instanceMethodBuilder.define('removeTenant',1);

/**
  Returns headers for this application.
  @memberof App
  @function getHeaders
  @instance
  @example
  var object = Built.App('api_key').getHeaders();
  @return {object}
 */

var getHeaders = module.exports.getHeaders = function(app) {
  return app.options.headers;
}
instanceMethodBuilder.define('getHeaders',1);
/**
  Returns the URL of application
  @memberof App
  @instance
  @function getURL
  @instance
  @example
  var url = Built.App('api_key').getURL();
  @return {String}
 */

var getURL = module.exports.getURL = function(app) {
  var options = getOptions(app);
  return options.protocol + '://' + options.host + ':' + options.port + '/' + options.version;
}
instanceMethodBuilder.define('getURL',1);
/**
  Returns the version of built.io
  @memberof App
  @instance
  @function getVersion
  @instance
  @example
  var version = Built.App('api_key').getVersion();
  @return {String}
 */
module.exports.getVersion = function(app) {
  return getOptions(app).version;
}
instanceMethodBuilder.define('getVersion',1);
/**
  Changes the built.io version to be used in the final URL.
  @function setVersion
  @memberof App
  @instance
  @param {String} version The version of built to be used
  @example
  var app = Built.App('api_key').setVersion('v1');
  @return {App}
*/
module.exports.setVersion = R.curry(function(version, app) {
  var existingOptions = getOptions(app);
  var newOptions      = setAppOptions('version',version,existingOptions);
  return setOptions(newOptions, app);
})
instanceMethodBuilder.define('setVersion',2);

/**
  Through this method we can specify which adaptor should be used.
  @function setVersion
  @memberof App
  @instance
  @param {String} version The version of built to be used
  @example
  var app = Built.App('api_key').setAdaptor(Built.Adaptor.SOCKET);
  @return {App}
*/
module.exports.setAdaptor = R.curry(function(adaptorPath,app){
  var existingOptions = getOptions(app);
  var adaptor         = R.mixin({},require(adaptorPath));
  if(adaptorPath === Built.Adaptor.SOCKET){
    adaptor.makeCall = adaptor.makeCall(app); // curring the make call method with app instance
  }
  var newOptions     = setAppOptions('adaptor',adaptor,existingOptions);
  app.options        = newOptions;
  return app;
});
instanceMethodBuilder.define('setAdaptor',2);

module.exports.setSessionUpdate = R.curry(function(isUpdated, app){
  var existingOptions = getOptions(app);
  var newOptions      = setAppOptions('isSessionUpdated', isUpdated, existingOptions);
  return setOptions(newOptions, app);
})
instanceMethodBuilder.define('setSessionUpdate', 2);

module.exports.isSessionUpdated = function(app){
  return getOption('isSessionUpdated',app)
}
instanceMethodBuilder.define('isSessionUpdated', 1);
/**
  Fetches the application info.
  @function fetch
  @memberof App
  @instance
  @example
  var app = Built.App('api_key');
  app.fetch()
    .then(function(app){
      
    });
  @return {Promise<App>}
*/
module.exports.fetch  = function(app){
  var existingOptions = getOptions(app);
  var adaptor         = app.options.adaptor;
  var url             = app.getURL()+"/applications/"+"abc";  // abc is just dummpy data as built.io now doesn't require uid
  var requestObject   = utility.getAdaptorObj('GET',url, module.exports.getHeaders(app),null,null);
    return adaptor.makeCall(requestObject)
          .then(function(response) {
            response = response.entity.application;
            var app_info  = {
              name          : response.name,
              uid           : response.uid,
              app_variables : response.application_variables 
            };
            return setOptions(setAppOptions('app_info',app_info,existingOptions),app);
          });
};
instanceMethodBuilder.define('fetch',1);

/**
  Use this method to specify common properties that should be sent when a event is triggered. (Also works with trigger multipe)
  @function setEventProperties
  @memberof App
  @instance
  @example
  var app = Built.App('api_key').setEventProperties({
    client: 'chrome'
  });
  var Event = app.Analytics.Event;
  
  var event = Event('event1');
  
  event.setProperties({
    username:'abc'
  });
  
  event.trigger().then(function(event){ // Event is trigger with both app level and event level properties
    // Returns the same event.
  });

  @return {Promise<App>}
*/
module.exports.setEventProperties = R.curry(function(properties, app){
  var existingOptions = getOptions(app);
  var newOptions      = setAppOptions('event_properties',properties,existingOptions);
  return setOptions(newOptions, app);
});
instanceMethodBuilder.define('setEventProperties',2);


/**
  Returns properties set on app level.
  @function getEventProperties
  @memberof App
  @instance
  @example
  var app = Built.App('api_key').setEventProperties({
    client: 'chrome'
  });

  app.getEventProperties(); // returns { client:chrome }
  
  @return {Object}
*/
module.exports.getEventProperties =  R.compose(R.prop('event_properties'),getOptions);
instanceMethodBuilder.define('getEventProperties',1);

/**
  Gets the application name.
  @function getName
  @memberof App
  @instance
  @example
  var app = Built.App('api_key');
  app.fetch()
    .then(function(app){
      app.getName();
    });
  @return {String}
*/
module.exports.getName = function(app){
  return getOptions(app).app_info.name;
}
instanceMethodBuilder.define('getName',1);

/**
  Gets the application's api key.
  @function getApiKey
  @memberof App
  @instance
  @example
  var app = Built.App('api_key');
  app.fetch()
    .then(function(app){
      app.getApiKey();
    });
  @return {String}
*/
var getApiKey = module.exports.getApiKey = function(app){
  return getOptions(app).headers.application_api_key;
}
instanceMethodBuilder.define('getApiKey',1);

/**
  Gets the application variables.
  @function getAppVariables
  @memberof App
  @instance
  @example
  var app = Built.App('api_key');
  app.fetch()
    .then(function(app){
      app.getAppVariables();
    });
  @return {object}
*/
module.exports.getAppVariables = function(app){
  return getOptions(app).app_info.app_variables;
}
instanceMethodBuilder.define('getAppVariables',1);

function authtokenAndApiKeyHeaderWrap(options,apiKey) {
  var appHeaders                    = {};
  appHeaders['application_api_key'] = apiKey;
  if(utility.isBrowser()){
    if(Built.Session.COOKIE === options.persistSession && cookie.get(generateSessionKey(apiKey)) !== ""){
      appHeaders['authtoken'] = cookie.get(generateSessionKey(apiKey));
    }else if(Built.Session.LOCAL_STORAGE === options.persistSession && local_storage.get(generateSessionKey(apiKey))){
      appHeaders['authtoken'] = local_storage.get(generateSessionKey(apiKey)).authtoken;
    }
  }
  return appHeaders;
}

function generateSessionKey(apiKey){
  return BASE_COOKIE_NAME + "_" + apiKey;
}

function headersWrap(h) {
  return {
    headers: h
  };
}