var R                     = require('ramda');
var ObjCons               = require('./object');
var utility               = require('./utilities/utility');
var instanceMethodBuilder = require('./utilities/instanceMethodBuilder')();

/**
  @class Installation
  @classdesc 
    Represents a installation
  @description  
    Constructs a new installation.
  @param {string|object} uid The uid for the Installation, or a JavaScript object with initial values.
  @example
    var app           = Built.App('api_key');
    var installation  = app.Installation({
      device_token : "Sample_device_token";
    });
  @return {Installation}
*/
var installCons = module.exports = R.curry(function(app,cls,headers,query,data,delta){
var returnObj     = ObjCons(app,cls,headers,{},data,delta);
  returnObj.cons  = module.exports; 
  return instanceMethodBuilder.build(module.exports,returnObj);
});

utility.copyProperties(module.exports,ObjCons);

/**
  Sets the timezone for this installation as the current timezone.
  @function setCurrentTimeZone
  @instance
  @memberof Installation 
  @example
    var installation = Built.App('api_key').Installation();
    installation     = installation.setCurrentTimeZone();

  @return {Installation}
*/
module.exports.setCurrentTimeZone = function(object){
  var timeOffset      = (new Date()).getTimezoneOffset();
  var timezone        = (Math.abs(timeOffset) < 60 ? ((timeOffset < 0 ? "+" : "-") + ("0:") + Math.abs(timeOffset)) : (timeOffset < 0 ? "+" : "-") + (Math.floor((Math.abs(timeOffset) / 60)) + ":" + (Math.abs(timeOffset) % 60)));
  return object.set('timezone',timezone);
}
instanceMethodBuilder.define('setCurrentTimeZone',1);
/**
  Set the device token
  @function setDeviceToken
  @param {String} token The token to be given
  @instance
  @memberof Installation 
  @example
    var installation = Built.App('api_key').Installation();
    installation     = installation.setDeviceToken('abc123');
  @return {Installation}
*/
/*module.exports.setDeviceToken = R.curry(function(token,object){
  return object.set("device_token",token)
});*/

module.exports.setDeviceToken = module.exports.set('device_token');
instanceMethodBuilder.define('setDeviceToken',2);

// module.exports.setDeviceToken = module.exports.set('device_type');

/**
  Set the device type
  @function setDeviceType
  @param {String} type The type of device being used. Supported devices are Android and iOS.
  @instance
  @example
    var installation = Built.App('api_key').Installation('abc123');
    installation     = installation.setDeviceType('android');
  @memberof Installation 
  @return {Installation}
*/
module.exports.setDeviceType = module.exports.set('device_type');
instanceMethodBuilder.define('setDeviceType',2);

/**
  Subscribes to a given set of channels
  @function subscribeChannels
  @param {Array} channels Array of channels that should be subscribed.
  @instance
  @memberof Installation
  @example
    var installation = Built.App('api_key').Installation('abc123');
    installation     = installation.subscribeChannels(['person.object.create']); 
  @return {Installation}
*/
module.exports.subscribeChannels = R.curry(function(channels,object){
  if(!utility.isArray(channels))
    throw new Error("Channels should be array");
  return object.pushValue("subscribed_to_channels",channels,object);
});
instanceMethodBuilder.define('subscribeChannels',2);

/**
  Unsubscribes from a given set of channels
  @function unsubscribeChannels
  @param {Array} channels Array of channels that should be subscribed.
  @instance
  @memberof Installation
  @example
    var installation = Built.App('api_key').Installation('abc123');
    installation.fetch()
      .then(function(installation){
        installation.unsubscribeChannels(['person.object.create']);
      });
  @return {Installation}
*/
module.exports.unsubscribeChannels = R.curry(function(channels,object){
  if(!utility.isArray(channels))
    throw new Error("Channels should be array");
  return object.pullValue("subscribed_to_channels",channels,object);
});
instanceMethodBuilder.define('unsubscribeChannels',2);

/**
  Get the device token
  @function getDeviceToken
  @instance
  @memberof Installation
  @example
    var installation = Built.App('api_key').Installation('abc123'); 
    installation.fetch()
      .then(function(installation){
          var token = installation.getDeviceToken();
      });
  @return {String}
*/
var getDeviceToken = module.exports.getDeviceToken = module.exports.get('device_token');
instanceMethodBuilder.define('getDeviceToken',1);
/**
  Get the device type
  @function getDeviceType
  @instance
  @memberof Installation
  @example
    var installation = Built.App('api_key').Installation('abc123'); 
    installation.fetch()
      .then(function(installation){
        var type = installation.getDeviceType();
      }); 
  @return {String}
*/
module.exports.getDeviceType = module.exports.get('device_type');
instanceMethodBuilder.define('getDeviceType',1);


/**
  Get a list of subscribed channels by this device
  @function getSubscribedChannelList
  @instance
  @memberof Installation 
  @throws new Error("Uid not found")
  @example
    var installation = Built.App('api_key').Installation('abc123');
    installation.fetch()
      .then(function(installation){
        var list = installation.getSubscribedChannelList();
      }) 
  @return {Array}
*/
module.exports.getSubscribedChannelList = function(object){
  var list = object.get("subscribed_to_channels");
  if(list)
   return list;
  else
    return object.delta.subscribed_to_channels.PUSH.data;
}

instanceMethodBuilder.define('getSubscribedChannelList',1);


/**
  Fires an update call when the installation object has a uid property else fires a create call.
  @function save
  @instance
  @memberof Installation 
  @example
    var inst  = Built.App('api_key').Installation('abc123'); 
    inst.setDeviceType("android")
      .setDeviceToken("dummy_device_token")
      .subscribeChannels(["person.object.create"]);
      .save()
        .then(function(inst){
          
        })
  @return {Promise<Installation>}
*/
module.exports.save = function(object){
  if(!object.get("uid")){
    object = object.upsert({
      "device_token":getDeviceToken(object)
    });
  }
  return ObjCons.save(object).then(function(res){
     return res;
  });
}
instanceMethodBuilder.define('save',1);

