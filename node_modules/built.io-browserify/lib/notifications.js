var R                     = require('ramda');
var utility               = require('./utilities/utility');
var instanceMethodBuilder = require('./utilities/instanceMethodBuilder')();

var notificationPath = "/push";

/**
  @class Notification
  @classdesc   
    Notification allows you to create a notification.
  @description  
    Represents an Notification on built.io
  @param {object} data Initial value for a notification object
  @example
    var notification = Built.App('api_key').Notification({
      message: 'Hello',
      local_push: true,
      user_uids: [ 'userId' ]  
    }); 
  @return {Notification}
*/
var noteCons = module.exports = R.curry(function (app,headers,data){
  var returnObj  = {
    app      : app,
    headers  : headers,
    data     : data,
    toJSON   : function() {
      return data;
    }
  }
  return instanceMethodBuilder.build(module.exports,returnObj);
});

var noteHelper = R.curry(function(parameter,value,note){
  if(parameter === "send_at" && value instanceof Date){
    value = value.toISOString();
  }
  else if(parameter === "send_at" && !(value instanceof Date)){
    throw new Error("JavaScript Date object required")
  }
  var newData        = getMixinedNote(note);
  newData[parameter] = value;
  return noteCons(note.app,note.headers,newData) ;
});

/**
  Users who will receive the pushed notification
  @function addUsers
  @param {Array} users_uid Array of user uids 
  @instance
  @memberof Notification
  @example
    var note = Built.App('api_key').Notification();
    note     = note.addUsers(['userId1','userId12']]);
  @return {Notification}
*/

module.exports.addUsers     = noteHelper("user_uids");
instanceMethodBuilder.define('addUsers',2);

/**
  Time at which the notification should be sent
  @function atTime
  @param {Date} date Instance of Date.
  @instance
  @memberof Notification
  @example
    var note = Built.App('api_key').Notification();
    note     = note.atTime(new Date());
  @return {Notification}
*/
module.exports.atTime       = noteHelper("send_at");
instanceMethodBuilder.define('atTime',2);
/**
  Notifications should be send based on user's time zone.  
  @function inLocalTime
  @param {Boolean} boolean Set this property to true if you want to send the notification based on user's timezone. Valid only when time is set for a notification (Optional and Defaults to false).
  @instance
  @memberof Notification
  @example
    var note = Built.App('api_key').Notification();
    note     = note.atTime(new Date());
    note     = note.inLocalTime(true);
  @return {Notification}
*/
module.exports.inLocalTime  = noteHelper("local_push");
instanceMethodBuilder.define('inLocalTime',2,[false]);

/**
  Set the message to be send along with the notification
  @function setMessage
  @param {String} message The message to be sent
  @instance
  @memberof Notification
  @example
    var note = Built.App('api_key').Notification();
    note     = note.setMessage('Hello');
  @return {Notification}
*/
module.exports.setMessage   = noteHelper("message");
instanceMethodBuilder.define('setMessage',2);

/**
  Sends a notification to all registered devices
  @function send
  @instance
  @memberof Notification
  @example
    var note = Built.App('api_key').Notification({
      message: 'Hello',
      local_push: true,
      user_uids: [ 'userId' ]  
    }); 
    note.send()
      .then(function(){
  
      });
  @return {Promise<null>}
*/

module.exports.send = function(note){
  var adaptor = note.app.options.adaptor;
  var entity = {
    push : getData(note)
  };
  var requestObject = utility.getAdaptorObj("POST",getURL(note),getCombinedHeaders(note), entity, null);
  return adaptor.makeCall(requestObject).then(function(response) {
    return null;
  },function(error){
  });
}
instanceMethodBuilder.define('send',1);

function getURL(note){
  var Built = require("./built");
  return Built.App.getURL(note.app)+""+notificationPath;
}

getCombinedHeaders = function(note) {
  var Built = require("./built");
  return R.mixin(note.headers, Built.App.getHeaders(note.app))
}
function getMixinedNote(note){
  return R.mixin({},getData(note));
}

function getData(note){
  return note.data;
}