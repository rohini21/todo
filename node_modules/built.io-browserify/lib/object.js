var R 				            = require('ramda');
var utility 		          = require('./utilities/utility');
var instanceMethodBuilder = require('./utilities/instanceMethodBuilder')();
var Built                 = require('./built');
/*
	Constants
*/
var objectsPath = '/objects'; 

/**
  @class Object
  @classdesc 
  An object is a instance of a Class
  @instance
  @description Represents an object of a class.
  @param {String|object} uid The uid of this object or a object with initial values.
  @example
  var Person = Built.App('api_key').Class('person').Object; // return a Object Constructor
  // Example demonstrate constructor taking a object's uid as argument
  var obj    = Person('uid');
  // Example demonstrate constructor taking a initial value.
  var obj    = Person({
    name:'abc',
    email:['abc@email.com','pqr@email.com']
  });
  @return {Object}
*/
var objectCons = module.exports = R.curry(function(app,cls,headers,query,initial,deltaObj) {
  
  var delta  = {};
	var data   = {};

	if (utility.isObject(deltaObj)){ 
		delta = deltaObj;
	}
	else {
		delta = {
			uid: deltaObj
		};
	}
	if(utility.isEmpty(initial))
		data = delta;
	else
		data = initial;

	var returnObj  = {
		app 	   : app,
		cls 	   : cls,
		headers  : headers,
    query    : query,
		data 	   : data,
    delta    : delta,
		toJSON 	 : function() {
			return data;
		}
	}
  returnObj = instanceMethodBuilder.build(module.exports,returnObj);
  installPluginsOnInstance(returnObj);
  return returnObj;
});

function installPluginsOnInstance(object){
  pluginsHelper.plugins.map(function(plugin){
    if(plugin.realtime && plugin.realtime.onObjectInstance){
      plugin.realtime.onObjectInstance(object);
    }
  });
};

/**
  Gets the data for given property.
  @memberof Object
  @function get
  @param {String} property The object's property
  @instance
  @example
    var person = Built.App('api_key').Class('person').Object({
      name:'ABC',
      emailAddress:['abc@email.com']
    });
    var value = person.get('name');   // Returns 'ABC'
  @return {variable}
*/

var getProperty = module.exports.get = R.curry(function(property, object) {  
     return getData(object)[property];
});
instanceMethodBuilder.define('get',2);

/**
  Gets the header object.
  @function getHeaders
  @memberof Object
  @instance
  @memberof Object
  @example
  var person  = Built.App('api_key').Class('person').Object();
  var headers = person().getHeaders();
  @return  {object}
*/
var getHeaders = module.exports.getHeaders = function(object) {
  return object.headers;  
}
instanceMethodBuilder.define('getHeaders',1);

module.exports.getCombinedHeaders = function(object) {
	var Cls 			      = require('./class');
	var clsHeaders 		  = Cls.getCombinedHeaders(object.cls);
	var combinedHeaders = R.mixin(clsHeaders.headers, object.headers)
	return combinedHeaders;
}
instanceMethodBuilder.define('getCombinedHeaders',1);
/**
  Sets a new header
  @function setHeaders
  @param {String} header The header key
  @param {String} value The header value
  @example
  var person  = Built.App('api_key').Class('person').Object();
  person      = person.setHeader('My-Custom-Header','MyValue');
  @instance
  @memberof Object 
  @return {Object}
*/
var setHeader = module.exports.setHeader = R.curry(function(header, value, object) {
	var existingHeaders = object.headers;
	var newHeader 		  = R.mixin({}, existingHeaders);
	newHeader[header] 	= value;
	return object.cls.ObjectCons(newHeader,getQuery(object),getData(object),getDeltaObject(object));
});
instanceMethodBuilder.define('setHeader',3);
/**
  Removes a header from object 
  @function removeHeader
  @param {String} header The header to be removed
  @example
  var person  = Built.App('api_key').Class('person').Object();
  var person  = person.removeHeader('My-Custom-Header');
  @instance
  @memberof Object
  @return {Object}
*/
module.exports.removeHeader = R.curry(function(header, object) {
	var newHeaders = R.mixin({}, object.headers);
	delete newHeaders[header];
	return object.cls.ObjectCons( newHeaders,getQuery(object),getData(object),getDeltaObject(object));
})
instanceMethodBuilder.define('removeHeader',2);

var getURL = module.exports.getURL = function(object) {
	var Cls  = require('./class');
	if (object.isNew())
		return Cls.getURL(object.cls) + objectsPath + '/' + object.getUid();
	else
		return Cls.getURL(object.cls) + objectsPath
}
instanceMethodBuilder.define('getURL',1);

/**
  Decrements the number field by a given amount (Note: Decrement is done on the server)
  @function decrement
  @param {String} key Uid of number field
  @param {number} number By how much amount to decrement.
  @throws new Error('Not a number');
  @instance
  @memberof Object
  @example
  var person  = Built.App('api_key').Class('person').Object();
  person      = person.decrement('age',10); //Decrements age field value by 10
  @return {Object}
*/
module.exports.decrement =  R.curry(function(key, number, object) {
	return operationHelper('SUB',key,number,object);
})
instanceMethodBuilder.define('decrement',3);
/**
  Increments the number field by a  given amount (Note: Increment is done on the server)
  @function increment
  @param {String} key Uid of number field
  @param {number} number By how much amount to increment.
  @throws new Error('Not a number');
  @instance
  @memberof Object
  @example
  var person  = Built.App('api_key').Class('person').Object();
  person      = person.increment('age',10); //Increments age field value by 10
  @return {Object}
*/
module.exports.increment =  R.curry(function(key, number, object) {
	return operationHelper('ADD',key,number,object);
})
instanceMethodBuilder.define('increment',3);
/**
  Divides the number field by given amount (Note: Division is done on the server)
  @function divide
  @param {String} key Uid of number field
  @param {number} number By how much amount to divide.
  @example
  var person  = Built.App('api_key').Class('person').Object();
  person      = person.divide('age',10); //Divides age field value by 10
  @throws new Error('Not a number');
  @instance
  @memberof Object
  @return {Object}
*/
module.exports.divide =  R.curry(function(key, number, object) {
	return operationHelper('DIV',key,number,object);
})
instanceMethodBuilder.define('divide',3);
/**
  Multiply the number field by given amount (Note: Multiplication is done on the server)
  @function multiply
  @param {String} key Uid of number field
  @param {number} number By how much amount to multiple.
  @example
  var person  = Built.App('api_key').Class('person').Object();
  person      = person.multiply('age',10); //multiply age field value by 10
  @throws new Error('Not a number');
  @instance
  @memberof Object
  @return {Object}
*/
module.exports.multiply =  R.curry(function(key, number, object) {
	return operationHelper('MUL',key,number,object);
})
instanceMethodBuilder.define('multiply',3);
/**
  Returns the JSON representation of object's data
  @function getData
  @instance
  @memberof Object
  @example
  var person  = Built.App('api_key').Class('person').Object({
    name:'ABC'
  });
  var data    = person.getData(); // Returns { name:'ABC' }
  @return {object}
*/
var getData = module.exports.getData = function(object) {
	return object.data;
}
instanceMethodBuilder.define('getData',1);
/**
  Assigns parameters to object
  @function assign
  @param {object} data Plain JavaScript object with new contents 
  @instance
  @memberof Object	
  @example
  var Person      = Built.App('api_key').Class('person').Object;        // Returns Object constructor
  var person      = Person({name: 'A'});	                              // person contains {name: 'A'}	
  person          = person.assign({email_address: 'xyz@email.com'});    // person now contains {name: 'A', email_address: 'xyz@email.com'}
  @return {Object}
*/
module.exports.assign = R.curry(function(data, object) { // assigns dirty object to object.data as well to fullfill user expectations
	var newData  = R.mixin(getData(object), data);
	var newDelta = R.mixin(getDeltaObject(object), data);
	return object.cls.ObjectCons( object.headers,getQuery(object),newData, newDelta);
})
instanceMethodBuilder.define('assign',2);

var set = module.exports.set = R.curry(function(name, value, object) {                  // assigns dirty object to object.data as well to fullfill user expectations
	var newData	   = R.mixin({}, getData(object));
	var newDelta   = R.mixin({}, getDeltaObject(object));
	newData[name]  = value;
	newDelta[name] = value;
	return object.cls.ObjectCons( object.headers,getQuery(object),newData, newDelta);
})
instanceMethodBuilder.define('set',3);

instanceMethodBuilder.define('setTags',2);

/**
  Retrieves the uid of the object
  @function getUid
  @example
  var person  = Built.App('api_key').Class('person').Object('123');
  person.getUid(); // returns 123
  @instance
  @memberof Object 
  @return {String}
*/
var getUid = module.exports.getUid = function(object){
  return getDeltaObject(object).uid || getData(object).uid;
}
instanceMethodBuilder.define('getUid',1);
/**
  Assigns a uid.
  @function setUid
  @param {String} uid Uid of a object
  @example
  var person  = Built.App('api_key').Class('person').Object();
  person      = person.setUid('uid');
  @instance
  @memberof Object 
  @return {Object}
*/
module.exports.setUid = set('uid');
instanceMethodBuilder.define('setUid',2);

/**
  Assign a tag(s) for this object
  @function setTags
  @param {Array} tags Array of tags.
  @instance
  @memberof Object
  @example
  var person  = Built.App('api_key').Class('person').Object(); 
  person      = person.setTags(['tag1','tag2']);
  @return {Object}
*/
module.exports.setTags = R.curry(function(tags,object){
  var newDelta      = getDeltaObject(object);
  newDelta['tags']  = tags;
  return object.cls.ObjectCons( object.headers,getQuery(object),getData(object), newDelta);
});
instanceMethodBuilder.define('setTags',2);
/**
  Sets a location for this object
  @function setLocation
  @param {Location} point Instance of Built.Location
  @example
  var location  = Buitl.Location(60,80);
  var person    = Built.App('api_key').Class('person').Object();
  person        = person.setLocation(location);
  @instance
  @memberof Object 
  @return {Object}
*/
module.exports.setLocation = R.curry(function(point,object){
  var newDelta = R.mixin({},getDeltaObject(object));
  var locData  = point.toJSON();
  newDelta['__loc'] = [locData.longitude,locData.latitude];
  return object.cls.ObjectCons( object.headers,getQuery(object),getData(object), newDelta);
});
instanceMethodBuilder.define('setLocation',2);

/**
  Returns the location of this object
  @function getLocation
  @instance
  @memberof Object 
  @example
  var person    = Built.App('api_key').Class('person').Object();
  var location  = person.getLocation();
  @return {Location}
*/
module.exports.getLocation = R.curry(function(object){
  var Location   = Built.Location;
  var objLoc     = object.get('__loc');
  var locObject  = Location(objLoc[0],objLoc[1]);
  return locObject;  
});
instanceMethodBuilder.define('getLocation',1);
/**
  Helps to check whether uid is assigned to this object or no.
  @function isNew
  @param {String} uid Uid of a object
  @instance
  @memberof Object 
  @example
  var person    = Built.App('api_key').Class('person').Object({
    uid:'bltbcfde97772772727'
  });
  var boolean   = person.isNew();
  @return {Object}
*/
module.exports.isNew = function(object){
  return !! object.getUid();
}
instanceMethodBuilder.define('isNew',1);
/**
  Pushes a value at a specified index in the given field(Applies only to fields that allow multiple values)
  @function pushValueAtIndex
  @param {String} key Uid of field
  @param {String|Object|Array} value Value to be pushed
  @param {number} index Index at which value should be pushed 
  @throws new Error('Index value inappropriate')
  @example
  var person    = Built.App('api_key').Class('person').Object();
  person        = person.pushValueAtIndex('group_field',{first_name:'ABC',second_name:'PQR'},1);
  @instance
  @memberof Object	
  @return {Object}
*/
module.exports.pushValueAtIndex = R.curry(function(key, value, index, object) {
	return pushPullHelper('PUSH',key,value,index,object);
})
instanceMethodBuilder.define('pushValueAtIndex',4);
/**
  Appends a value in the given field.(Applies only to fields that allow multiple values)
  @function pushValue
  @param {String} key Uid of field
  @param {String|Object|Array} value Value to be pushed
  @example
  var person    = Built.App('api_key').Class('person').Object();
  person        = person.pushValue('group_field',{first_name:'ABC',second_name:'PQR'});
  @instance
  @memberof Object	
  @return {Object}
*/
module.exports.pushValue = R.curry(function(key, value, object) {
	return pushPullHelper('PUSH',key,value,"",object);
})
instanceMethodBuilder.define('pushValue',3);

/**
  For the given field, it deletes the first matched value.(Applies only to fields that allow multiple values)
  @function pullValue
  @param {String} key Uid of field
  @param {String|Array|Object} value Values to be deleted
  @example
  var person    = Built.App('api_key').Class('person').Object();
  person        = person.pullValue('group_field',{first_name:'first',second_name:'second'});
  @instance
  @memberof Object	
  @return {Object}
*/
module.exports.pullValue = R.curry(function(key,value,object) {
	return pushPullHelper('PULL',key,value,"",object);	
})
instanceMethodBuilder.define('pullValue',3);

/**
  For the given field, it deletes the value at a given index.(Applies only to fields that allow multiple values)
  @function pullValueAtIndex
  @param {String} key Uid of field
  @param {number} index Index at which the value should be deleted 
  @throws new Error('Index value inappropriate')
  @example
  var person    = Built.App('api_key').Class('person').Object();
  person        = person.pullValueAtIndex('group_field',1);
  @instance
  @memberof Object	
  @return {Object}
*/
module.exports.pullValueAtIndex = R.curry(function(key,index,object) {
	return pushPullHelper('PULL',key,"",index,object);
})
instanceMethodBuilder.define('pullValueAtIndex',3);


/**
  Upserts the object (Updates the matching object if found on built.io or creates a new object)
  @function upsert
  @param {object} upsertObject Plain JavaScript object
  @instance
  @memberof Object
  @example
  var Person  = Built.App('api_key').Class('person').Object;
  var person  = Person({name:'ABC',gender:'Male'});	           // object contains {name:'ABC'}	
  person      = person.upsert({ name:'ABC' });                      //If object having its name field's as ABC is found its updated else it creates a new object on built.io
  person.save().then(function(person){ 
		// do something
  });
  @return {Object}
*/
module.exports.upsert  = R.curry(function(upsertObject,object){
	var newDelta 	   = R.mixin({}, getDeltaObject(object));
	newDelta['UPSERT'] = upsertObject;
	return object.cls.ObjectCons(object.headers,getQuery(object),getData(object),newDelta);
})
instanceMethodBuilder.define('upsert',2);

/**
 Checks whether the object has a given property
 @function has
 @param {String} key The property to be checked.
 @instance
 @memberof Object
 @example
  var person  = Built.App('api_key').Class('person').Object({
    name:'ABC',
    age:22
  });
  var boolean = person.has('name');
 @return {Boolean}
*/
module.exports.has = R.curry(function(key,object){
	return object.data.hasOwnProperty(key);
})
instanceMethodBuilder.define('has',2);

/**
 Sets a ACL for this object
 @function setACL
 @param {ACL} aclObject The ACL object
 @instance
 @memberof Object
 @example
  var person  = Built.App('api_key').Class('person').Object();
  var acl     = Built.ACL();
  acl         = acl.setPublicDeleteAccess(true);
  person      = person.setACL(acl);
 @return {Boolean}
*/
module.exports.setACL = R.curry(function(aclObject,object){
  var newDelta    = R.mixin({},getDeltaObject(object));
  newDelta['ACL'] = aclObject.toJSON();
  return object.cls.ObjectCons(object.headers,getQuery(object),getData(object),newDelta);
})
instanceMethodBuilder.define('setACL',2);

/**
 Assigns a set references to a reference field of an object.
 @function setReference
 @param {String} field_uid The uid of field whose references are to be set
 @param {Array} refArray Array of uids or array of built objects
 @throws new Error('new Error('Uid not found'))
 @instance
 @memberof Object 
 @example
  var app  = Built.App('api_key');
  var Person       = app.Class('person').Object;
  var Address      = app.Class('address').Object;
  var address      = Address({
    uid:'uid'
  });
  var person       = Person();
  person           = person.setReference('address',[address]);        // Using array of objects as argument
  person           = person.setReference('address',['uid1','uid2']);  // Using array of uid's as argument
 @return {Object}
*/
module.exports.setReference = R.curry(function(field_uid,refArray,object){
  var newDelta        = R.mixin({},getDeltaObject(object));
  var tempRefArray    = refArray.slice(0);              // Clone the array
  if(refArray[0] && refArray[0].app){                   //check whether it is array of built objects
    for (var i = 0; i < refArray.length; i++) {
      if(!refArray[i].getUid()){
        throw new Error('Uid not found');
      }
      tempRefArray.push(getDeltaObject(refArray[i]).uid);
    };
  }
  newDelta[field_uid] = tempRefArray;
  return object.cls.ObjectCons(object.headers,getQuery(object),getData(object),newDelta);
});
instanceMethodBuilder.define('setReference',3);

/**
 Fires a query on built.io and all the objects which pass the query condition are being assigned to the reference field.
 @function setReferenceWhere
 @param {String} field_uid The uid of the reference field
 @param {object} conditionObject Object specifying the conditions.
 @throws new Error('new Error('Uid not found'))
 @example
  var app       = Built.App('api_key');
  var Person    = app.Class('person').Object;
  var person    = Person('abc123');             //Uid is mandatory
  var newObject = person.setReferenceWhere('ref_address',{uid:'1234'}); // Object having uid as 1234 is assigned to ref_address
  Object.save(newObject).then(function(res){
    // object's ref_address field is updated
  });
@instance
@memberof Object 
 @return {Object}
*/
module.exports.setReferenceWhere = R.curry(function(field_uid,conditionObject,object){
  if(!object.isNew())
    throw new Error('Uid not found');

  var newDelta        = R.mixin({},getDeltaObject(object));
  newDelta[field_uid] = {
    where : conditionObject
  }
  return object.cls.ObjectCons(object.headers,getQuery(object),getData(object),newDelta); 
});
instanceMethodBuilder.define('setReferenceWhere',3);

/**
 Use this method only when the values of the fields inside referenced object are to be changed while creating a new object.
 @function upsertForReference
 @param {String} field_uid Reference uid on which UPSERT is to be performed.
 @param {object} conditionObject Conditions to be applied on the referred class fields.
 @param {object} replacementObject Replacement values
 @throws new Error('new Error('Uid not found'))
 @instance
 @example
  var app       = Built.App('api_key');
  var Person    = app.Class('person').Object;
  var person    = Person('abc123');             //Uid is mandatory
  var newObject = person.upsertForReference('ref_address', {city:'Bombay'}, {name: 'Mumbai'});  
    // The method would first check Address class (the class referred by person class in ref_address field)whether any city(s) with name 'Bombay' exist if yes, it would be replaced by Mumbai.
    If not, a new entry would be made with name as Mumbai.
  });
 @memberof Object 
 @return {Object}
*/
module.exports.upsertForReference = R.curry(function(field_uid, conditionObject, replacementObject, object) {
  if(!object.isNew())
    throw new Error('Uid not found');

  var newDelta        = R.mixin(replacementObject,getDeltaObject(object));
  newDelta[field_uid] = {
    UPSERT : conditionObject
  }
  return object.cls.ObjectCons(object.headers,getQuery(object),getData(object),newDelta); 
});
instanceMethodBuilder.define('upsertForReference',4);

/**
 Issues a timeless update, which means date of creation and updation are not modified
 @function timeless
 @Instance
 @memberof Object
 @example
  var person    = Built.App('api_key').Class('person').Object();
  person        = person.timeless();
 @return {Object}
*/
module.exports.timeless = function(object){
  var newHeader = getHeaders(object);
  newHeader['timeless'] = true;
  return object.cls.ObjectCons(newHeader,getQuery(object),getData(object),getDeltaObject(object));
};
instanceMethodBuilder.define('timeless',1);
/**
 Adds a custom query to object
 @function addQuery
 @param {String} key Query parameter's name 
 @param {Varaiable} object Query parameter's value
 @instance
 @memberof Object 
 @example
  var person    = Built.App('api_key').Class('person').Object('uid');
  person        = person.addQuery('include_owner',true); 
  person.fetch()
   .then(function(object){
    // do something
   });
 @return {Object}
*/
var addQuery = module.exports.addQuery = R.curry(function(key,value,object){
  var newQuery  = R.mixin({},getQuery(object));
  newQuery[key] = value;
  return object.cls.ObjectCons(object.headers,newQuery,getData(object),getDeltaObject(object)); 
});
instanceMethodBuilder.define('addQuery',3);

/**
 Includes the owner of the object in response
 @function includeOwner
 @instance
 @memberof Object
 @example
  var person = Built.App('api_key').Class('person').Object();
  var person = person.includeOwner();
 @return {Object}
*/
module.exports.includeOwner = addQuery('include_owner',true);
instanceMethodBuilder.define('includeOwner',1);

/**
  Saves a object as draft i.e The object bypasses all validation and is not published.
  @function saveAsDraft
  @memberof Object  
  @example
  var person    = Built.App('api_key').Class('person').Object();
  person.saveAsDraft({
    username:'ABC'
  })
  .then(function(person){
    console.log(person.toJSON());
  });
  @instance
  @return {Promise<Object>}
*/
module.exports.saveAsDraft = function(object){
  var newDelta          = R.mixin({}, getDeltaObject(object));
  newDelta['published'] = false;
  var draftObject       = object.cls.ObjectCons(object.headers,getQuery(object),getData(object),newDelta);
  return module.exports.save(draftObject);
}
instanceMethodBuilder.define('saveAsDraft',1);

/**
  Saves/Updates the object on built.io
  @function save
  @instance
  @memberof Object
  @example
    var Person         = Built.App(' api_key ').Class(' person ').Object;	
    var personWithUid  = Person({
      uid:'abc123',
      name:'ABC'
    });
    personWithUid.save()                // As the object has a uid property set, a update request is sent to built.io.
      .then(function(object){
        // updated object  
      });
    var personWithoutUid = Person({     
      name:'PQR'
    });
    personWithoutUid.save()             // As the object has no uid property a create request is sent.
      .then(function(object){
        // created object
      })
  @return {Promise<Object>}
*/
module.exports.save = function(object) {
	var entity 	= {
		"object": getDeltaObject(object)
	};
	var adaptor = object.app.options.adaptor;
	var method;
	if (!object.isNew()) {
		method 	= 'POST';
	} else {
		method 	= 'PUT';
  }
  var params        = getQuery(object);
  if(Object.keys(params).length === 0){
    params = null;
  }
  var requestObject = utility.getAdaptorObj(method,getURL(object),module.exports.getCombinedHeaders(object),entity,params);
  return adaptor.makeCall(requestObject)
    .then(function(response) {
      if (response.entity.count) {
        var responseArray = [];
        responseArray.push(response.entity.count);
        responseArray.push(consObj(object, response.entity.object));
        return responseArray;
      } else {
        return consObj(object, response.entity.object); // use case where count of object was requested
      }
    });
}
instanceMethodBuilder.define('save',1);

function consObj(object, data) {
    return object.cls.ObjectCons(object.headers,{},data,{});
}
/**
  Fetch the latest version of the object from built.io
  @function fetch
  @throws new Error('Uid not found');
  @example
    var person = Built.App(' api_key ').Class(' person ').Object('abc123'); 
    person.fetch()
      .then(function(person){
        // object fetch from built.io
      });
  @instance
  @memberof Object
  @return {Promise<Object>}
*/
module.exports.fetch = function(object) {
  var adaptor = object.app.options.adaptor;
  var params  = getQuery(object);
  if(Object.keys(params).length === 0){
    params = null;
  }
  if (!object.isNew()) {
    throw new Error('Uid not found');
  }
  var requestObject = utility.getAdaptorObj('GET', module.exports.getURL(object), module.exports.getCombinedHeaders(object),null,params);
  return adaptor.makeCall(requestObject).then(function(response) {
    return object.cls.ObjectCons( getHeaders(object),getQuery(object),response.entity.object,getDeltaObject(object));
  });
}
instanceMethodBuilder.define('fetch',1);
/**
  Deletes the object from built.io
  @function delete
  @throws new Error('Uid not found');
  @instance
  @memberof Object
  @example
    var person = Built.App(' api_key ').Class(' person ').Object('abc123'); 
    person.delete()
      .then(function(){
  
      });
  @return {Promise<Object>}
*/
module.exports.delete = function(object) {
  var adaptor = object.app.options.adaptor;
  if (!object.isNew()) {
    throw new Error('Uid not found');
  }
  var requestObject = utility.getAdaptorObj('DELETE', module.exports.getURL(object), module.exports.getCombinedHeaders(object), null, null);
  return adaptor.makeCall(requestObject).then(function(response) {
    return null;
  });
}
instanceMethodBuilder.define('delete',1);

/*
 This method checks if a model was provided if it is provided it binds a sync method to it if not uses the default built model
*/
function modelHelper(model,object){
  var newModel;
  if(!model){
    newModel = getDefaultBackBoneModel(object);
  }
  else{
  newModel = model.extend({
      sync : getSync(object)
    });
  }
  return newModel;
}

/**
  Returns a Backbone version of the same object.
  @function toBackboneModel
  @param {Model} model Takes a Backbone model to be used for conversion. (If no model is specified built.io's default model would be used)
  @instance
  @memberof Object
  @example
    var model = Backbone.Model.extend({
    getUsername:function(){
      this.get("username");
    },
    setUsername:function(name){
      this.set("username", name);
    },
    idAttribute:"uid"
    });

    var Person = Built.App('blt5d4924dff62a633b').Class('person').Object; 
    var person = Person({
      username:'ABC'
    });

    var backbone = person.toBackboneModel(model);
    //Now "backbone" can be used to fetch,save,delete,update object on Built.
    backbone.save(null,{
      success:function(res){
        // res is also has a Backbone model type
      }
    });
    
    // built.io's default Backbone model would be used
    var backbone = person.toBackboneModel();
    //Now "backbone" can be used to fetch,save,delete,update object on Built.
    backbone.save(null,{
      success:function(res){
        // res is also has a Backbone model type
      }
    });
  @return {Backbone} Returns a BackBone object
*/
module.exports.toBackboneModel = function(model, object){
  if(utility.backboneExist()){
    var newModel = modelHelper(model,object);
    if(utility.isObject(object))
      return new newModel(object.toJSON());
  }else{
    throw new Error('BACKBONE not included');
  }
}
instanceMethodBuilder.define('toBackboneModel',2,[null]);

/**
  Returns a Backbone collection.
  @function BackboneCollection
  @param {object} config Takes a plain JavaScript object where "objects" key is used to pass array of objects and "query" key is used to specify a query.
  @param {Model} model Takes a Backbone model to be used by the collection for conversion. (If null is specified Built's default Backbone model is used)
  @static
  @memberof Object
  @example
    var app     = Built.App('api_key');
    var Person  = app.Class('person').Object; 
    var Query   = app.Class('person').Query;
    
    var person      = Person({
      username:'ABC'
    });
    var person1      = Person({
      username:'PQR'
    });

    var personArray = [person,person1];

    var model = Backbone.Model.extend({
    getUsername:function(){
      this.get("username");
    },
    setUsername:function(name){
      this.set("username", name);
    },
    idAttribute:"uid"
    });


    var backbone    = Person.BackboneCollection({ 
      objects : personArray,
      model   : model
    });

    // Converts the objects in personArray to Backbone collection using the given model

    var query = Query()
                .where('username','ABC');

    var backbone = Person.BackboneCollection({
      query : query,
      model : model
    });

    // Query to built.io with given query and converts the returned objects to collection using the given model
    //Now backbone can be used to fetch,save,delete,update object on Built.

    backbone.fetch();
    
  @return {Backbone} Returns a BackBone object
*/
objectCons.BackboneCollection = function(config){
  var object = this;
  if(utility.backboneExist()){
    if(config.objects){
      var collection = Backbone.Collection.extend({
       sync:function(type,obj,options){
         if(arguments.length == 2){
          options = obj;
          obj     = this;
        }
        options   = options||{};
        var that = this;
        if(type === "read" && object){
          var query = object.cls.Query();
          query.exec()
          .then(function(objs){
            for (var i = 0; i < objs.length; i++) {
              if (typeof objs[i] == 'object') {
                var newModel = modelHelper(config.model,objs[i]);
                that.add(new newModel(objs[i].toJSON()));
              }
            }
            options.success(that.models);        
          },function(error){
            options.error(error)
          });
        }
        /*else if(type === 'create'){
          var newModel;
          if(! obj instanceof Backbone.Model){
            var Model = modelHelper(config.model,object);
            newModel  = new Model();
          }
          else{
            newModel = obj;
          }
          if(options.wait === undefined || options.wait === false){
            that.add(newModel);
          }
          var data = newModel.attributes;
          var object = object.cls.Object(data);
          object.save().then(function(object){
            if(options.wait === true){
              that.add(newModel);
            }
          });
        }*/
        return null;
      }
    });
    collection = new collection();
    for (var i = 0; i < config.objects.length; i++) {
      if (typeof config.objects[i] == 'object') {
        var newModel = modelHelper(config.model,config.objects[i]);
        collection.add(new newModel(config.objects[i].toJSON()));
      }
    }
    return collection;
    }else if(config.query){
      var collection = Backbone.Collection.extend({
        sync: function(type, obj, options) {
          if (arguments.length == 2) {
            options = obj;
            obj = this;
          }
          options = options || {};
          var that = this;
          if (type == "read") {
            var query = config.query
            query.exec()
            .then(function(objects) {
              for (var i = 0; i < objects.length; i++) {
                  var newModel = modelHelper(config.model,objects[i]);
                  that.add(new newModel(objects[i].toJSON()));
              }
              options.success(that.models);
            }, function(error) {
              options.error(error)
            });
          }
          return null;
        }
      });
      return new collection();
    }
    else{
      new Error("Config argument not set properly");
    }
  }
}


function getDefaultBackBoneModel(object){
  var model = Backbone.Model.extend({
      idAttribute:"uid",
      sync: getSync(object)
    });
  return model;
}

function getSync(object){
  return function(type,obj,options){
    if(arguments.length == 2){
      options = obj;
      obj     = this;
    }
    options         = options||{};
    var deltaObject = R.mixin(obj.changed,getDeltaObject(object));
    var builtModel  = object.cls.ObjectCons(object.headers,getQuery(object),getData(object),deltaObject);
    if(type == "read"){
     builtModel.fetch().then(function(res){
      options.success(res.toJSON());
    },function(error){
      options.error(error);
    });
   }else if(type ==  "create" || type  ==  "update"){
     builtModel.save().then(function(res){
      options.success(res.toJSON());
    },function(error){
      options.error(error);
    });
   }else if(type ==  "delete"){
     builtModel.delete().then(function(res){
      options.success(res);
    },function(error){
      options.error(error);
    });
   }
   return null;
 }
}


function operationHelper(operation,key,number,object){
  if (!utility.isNumber(number))
    throw new Error('Not a number');
  var newDelta  = R.mixin({}, getDeltaObject(object));
  var keyPresent  = !!getDeltaObject(object)[key];
  if (keyPresent) {
    newDelta[key][operation] = number
  } else {
    newDelta[key]= utility.keyValue(operation,number);
  }

  return object.cls.ObjectCons( object.headers,getQuery(object),getData(object), newDelta);
}
function pushPullHelper(operation,key, value, index, object){

  if(index !== "" && !utility.isNumber(index)){     //index = "" indicated append operation
    throw new Error('Index value inappropriate');
  }
  var objectOpts = utility.keyValue(key, utility.keyValue(operation, {  //operation can be PUSH or PULL
    data  : value,
    index : index           
  }));
  var mixedObject = R.mixin(getDeltaObject(object), objectOpts);
  return object.cls.ObjectCons(object.headers,getQuery(object),getData(object),mixedObject);
}

function getQuery(object){
  return object.query;
}

function getDeltaObject(object) {
  return object.delta;
}

