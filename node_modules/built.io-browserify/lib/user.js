var R                     = require('ramda');
var object                = require('./object');
var utility               = require('./utilities/utility');
var when                  = require('when');
var instanceMethodBuilder = require('./utilities/instanceMethodBuilder')();
var cookie                = require('./session/cookie');
var Events                = require('./events');

var USER_PATH             = '/application/users';

/**
  @class User
  @classdesc
    Represents a user of your application on built.io. User inherts from {@link Object}.
  @instance
  @description
    Creates a user with initial value
  @param {String|Object} uid The uid of this object or a user with inital values.
  @example
  var User = Built.App('api_key').User; 
  // Example demonstrating constructor taking a user's uid as argument
  var user = User('uid');
  // Example demonstrating constructor taking a initial value.
  var user = User({
    email:'abc@email.com'
  });
  @return {User}
*/
var userCons = module.exports = R.curry(function(app,cls,headers,query,data,delta) {
  var returnObj = object(app,cls,headers,{},data,delta);
  returnObj     = instanceMethodBuilder.build(module.exports,returnObj);
  installPluginsOnInstance(returnObj);
  return returnObj;
});
utility.copyProperties(module.exports, object);

function installPluginsOnInstance(user){
  pluginsHelper.plugins.map(function(plugin){
    if(plugin.realtime && plugin.realtime.onUserInstance){
      plugin.realtime.onUserInstance(user);
    }
  });
};
/**
  Logins the user on built.io and saves user's session based on the persist session option choosed.
  @function login
  @param {String} email Valid email address
  @param {String} password Valid password
  @instance
  @memberof User
  @fires user:login event of {@link Events}
  @example
    var user = Built.App('api_key').User();
    user.login('abc@email.com','password')
      .then(function(user){
        // logged in user
      });
  @return {Promise<User>}
*/
module.exports.login = R.curry(function(email, password, user) {
  var authObject = {
    email   : email,
    password: password
  };
  var entity = {
    "application_user": object.assign(authObject, user).data
  };
  var url  = user.app.getURL() + USER_PATH + '/login';
  return makeCallHelper('POST', url, entity, user).then(function(user){
    Events.trigger('user:login');
    user.app.setSession(user.toJSON());     //sets session of logged in user
    return user;
  });
})
instanceMethodBuilder.define('login',3);

/**
  Logs out the user from built.io and clears user's session.
  @function logout
  @throws new Error("User not logged in");
  @instance
  @fires user:logout event of {@link Events}
  @memberof User
    @example
    var user = Built.App('api_key').User();
    user.logout().then(function(res){
      // do something here
    });
  @return {Promise<null>}
*/
module.exports.logout = function(user){
  if(!user.app.isAuthenticated()){      // checks whether authtoken is set
    throw new Error('User not logged in');
  }
  var url           = getLogoutUrl(user);
  var adaptor       = user.app.options.adaptor;
  var requestObject = utility.getAdaptorObj('DELETE', url, module.exports.getCombinedHeaders(user),null, null);

  return adaptor.makeCall(requestObject)
          .then(function(response) {
            Events.trigger('user:logout');
            user.app.clearSession();
            return null;
          });
};
instanceMethodBuilder.define('logout',1);

/**
  Checks whether the user is currently logged in.
  @memberof User
  @function isAuthenticated
  @static
  @example
    var User = Built.App('api_key').User;
    User.isAuthenticated(); // returns true/false
  @return {Boolean}
*/
module.exports.isAuthenticated = appProxyHelper('isAuthenticated');

/**
  Fetches the user profile based on the current persist session option. Behaviour of each persist session option is explained below.</br>
  1) When session is persisted using <b>cookie</b>, authtoken would extracted from it an call to built.io would be made to fetch entire user profile.</br>
  2) When session is persisted using <b>localStorage</b>, entire user profile would be fetched from it and returned.</br>
  3) When forceFetch flag is set to true, user's profile would be forcefully fetched from built.(Ignores persist session option)</br>
  @memberof User
  @function getSession
  @param {Boolean} forceFetch Set the flag to true if you want to forceful fetch the user's profile from built.io (Optional and defaults to false) 
  @static
  @example
    var User = Built.App('api_key').User;  // Would forcefully fetch (forceFetch set to true) the user from from built.io   
    User.getSession(); // Returns the user profile
  @return {Promise<User>}
*/
module.exports.getSession = appProxyHelper('getSession');

/**
  Sets the session based on the persistence option. Authtoken in JSON object is mandatory.
  @memberof User
  @function setSession
  @static
  @param {object} userJSON Plain JavaScript object containing user profile
  @throws new Error("Authtoken not found in user object");
  @fires user:save-session event of {@link Events}
  @example
    var User = Built.App('api_key').User
    User.setSession({     // user object
      uid:'uid_value',
      email: 'abc@raweng.com',
      first_name: 'ABC',
      last_name: 'PQR',
      authtoken: 'XYZ'
    });
  @return {App} 
*/
module.exports.setSession = appProxyHelper('setSession');

/**
  Clears the session based on the persistence option.
  @memberof User
  @function clearSession
  @static
  @fires user:clear-session event of {@link Events}
  @example
    var User = Built.App('api_key').User; 
    User.clearSession // Would clear session based on the persistence option set for the application
  @return {App} 
*/
module.exports.clearSession = appProxyHelper('clearSession');

/**
  This method allows you to login as any user without requiring credentials for the same. This is only possible if a master key is setup on the app instance. Master Key overrides usual restrictions thus, enabling you to work as a privileged user. This method should to be used on the server side, where Master Key is not exposed to the client. Thus, it can be safely used in Built Extensions code.
  @memberof User
  @function generateAuthtoken
  @static
  @throws
    new Error('Master key not found in headers');
    new Error('Query instance inappropriate');
    new Error('Upsert argument should be a boolean value');
    new Error('Update object inappropriate');
  @example
    var app   = Built.App('api_key').setMasterKey('abcxyz');
    var User  = app.User; 
    User.generateAuthtoken()
      .then(function(user){
        console.log(user.toJSON()); // Logged-in user's details
      });
  @return {Promise<User>}
*/
module.exports.generateAuthtoken = appProxyHelper('generateAuthtoken');

/**
  This is helper function for AnyAuth feature, this method requires an extension function implementing AnyAuth login. 
  @memberof User
  @function anyAuth
  @static
  @param fnName {Function} The name of the AnyAuth function that needs to be executed
  @param reqBody {object} The request body that needs to be send with the request (Optional)
  @param reqHeaders {object} Headers that need to be sent along with the request (Optional)
  @example
    Built.App('api_key')
    .User
    .anyAuth('submit',{
        access_token:'dummy_access_token'
      },{
        dummy_header:'value'
      })
      .then(function(user){
        console.log(user.toJSON()); // Logged-in user's details
      });
  @return {Promise<User>} 
*/
module.exports.anyAuth = appProxyHelper('anyAuth');

function appProxyHelper(methodName){
  return function(app){
    return function(){
      return app[methodName].apply(app,arguments);
    }
  }
}
/**
  Activates a application user on built.io.
  @function activate
  @param {String} activationToken The user's activation token
  @throws new Error("Uid not logged in");
  @instance
  @memberof User
  @fires user:activate event of {@link Events}
  @example
    var user = Built.App('api_key').User();
    user.activate('abc123')
      .then(function(res){
        // do something here
      });
  @return {Promise<null>}
*/
module.exports.activate = R.curry(function(activationToken,user){
  if(!getDelta(user).uid)
    throw new Error('Uid not found')
  var activationUrl = getUserUrl(user)+'/activate/'+activationToken;
  var adaptor       = user.app.options.adaptor;
  var requestObject = utility.getAdaptorObj('GET',activationUrl,module.exports.getCombinedHeaders(user),null, null);
  return adaptor.makeCall(requestObject).then(function(response) {
    Events.trigger('user:activate',response.entity);
    return null;
  });
});
instanceMethodBuilder.define('activate',2);

/**
  Deletes a application user from built.io.
  @function deactivate
  @instance
  @memberof User
  @fires user:deactivate event of {@link Events}
  @throws new Error('Authentication token not found in headers');
  @throws new Error("Uid not found");      
  @example
    var user = Built.App('api_key').User();
    user.deactivate()
      .then(function(res){
        // do something here
      });
  @return {Promise<null>}
*/
module.exports.deactivate = R.curry(function(user){
  if(!user.getHeaders().authtoken){
    throw new Error('Authentication token not found in headers');
  }
  if(!getData(user).uid)
    throw new Error('Uid not found');
  var deactivationUrl = getUserUrl(user);
  var adaptor         = user.app.options.adaptor;
  var requestObject   = utility.getAdaptorObj('DELETE',deactivationUrl,module.exports.getCombinedHeaders(user),null, null);
  return adaptor.makeCall(requestObject).then(function(response) {
    Events.trigger('user:deactivate',response.entity);
    return null;
  });
});
instanceMethodBuilder.define('deactivate',1);
/**
  Fetches the user's uid based on email address
  @function fetchUserUidByEmail
  @param {String} email The email address of the user whose uid is to be fetched
  @throws new Error("Email not found");
  @instance
  @memberof User
  @example
    var user = Built.App('api_key').User();
    user.fetchUserUidByEmail('abc@email.com')
      .then(function(user){
        // do something here
      });
  @return {Promise<User>}
*/
module.exports.fetchUserUidByEmail = R.curry(function(email,user){
  if(!email)
    throw new Error('Email not found');
  var retrieveUrl = getUserUrl(user)+'/retrieve_user_uid'
  var authObject = {
    email:email
  }
  var entity = {
    "application_user": object.assign(authObject, user).data
  };
  var adaptor = user.app.options.adaptor;
  var requestObject = utility.getAdaptorObj('POST',retrieveUrl,module.exports.getCombinedHeaders(user),entity, null);
  return adaptor.makeCall(requestObject).then(function(response) {
    return user.cls.ObjectCons(module.exports.getHeaders(user),{},{},response.entity.uid);
  });
});
instanceMethodBuilder.define('fetchUserUidByEmail',2);

/**
  Fetches the user's uid based on Facebook's user id.
  @function fetchUserUidByFacebookUserId
  @param {String} user_id Facebook's user id.
  @throws new Error("User id not found");
  @instance
  @memberof User
  @example
    var user = Built.App('api_key').User();
    user.fetchUserUidByFacebookUserId('abc123')
      .then(function(user){
        // do something here
      });
  @return {Promise<User>}
*/
module.exports.fetchUserUidByFacebookUserId = R.curry(function(user_id,user){
  if(!user_id){
    throw new Error('User id not found');
  }
  return fetchUserByParameter('facebook','user_id',user_id,user);
});
instanceMethodBuilder.define('fetchUserUidByFacebookUserId',2);

/**
  Fetches the user's uid based on gmail address
  @function fetchUserUidByGoogleEmail
  @param {String} email Gmail address
  @throws new Error("Email address not found");
  @instance
  @memberof User
  @example
    var user = Built.App('api_key').User();
    user.fetchUserUidByGoogleEmail('abc123@gmail.com')
      .then(function(user){
        // do something here
      });
  @return {Promise<User>}
*/
module.exports.fetchUserUidByGoogleEmail = R.curry(function(email,user){
  if(!email)
    throw new Error('Email address not found');
  return fetchUserByParameter('google','email',email,user);
});
instanceMethodBuilder.define('fetchUserUidByGoogleEmail',2);

/**
  Fetches the user's uid based on Tibbr user id.
  @function fetchUserUidByTibbrUserId
  @param {String} userId Tibbr user id.
  @throws new Error("User id not found");
  @instance
  @memberof User
  @example
    var user = Built.App('api_key').User();
    user.fetchUserUidByTibbrUserId('abc123@gmail.com')
      .then(function(user){
        // do something here
      });
  @return {Promise<User>}
*/
module.exports.fetchUserUidByTibbrUserId = R.curry(function(user_id,user){
  if(!user_id)
    throw new Error('User id not found');
  return fetchUserByParameter('tibbr','user_id',user_id,user);
});
instanceMethodBuilder.define('fetchUserUidByTibbrUserId',2);

/**
  Fetches the user's uid based on Tibbr host.
  @function fetchUserUidByTibbrHost
  @param {String} host Tibbr host.
  @throws new Error("Tibbr host not found");
  @instance
  @memberof User
  @example
    var user = Built.App('api_key').User();
    user.fetchUserUidByTibbrHost('https://try.tibbr.com')
      .then(function(user){
        // do something here
      });
  @return {Promise<User>}
*/
module.exports.fetchUserUidByTibbrHost = R.curry(function(host,user){
  if(!host)
    throw new Error('Tibbr host not found');
  return fetchUserByParameter('tibbr','host',host,user);
});
instanceMethodBuilder.define('fetchUserUidByTibbrHost',2);

/**
  Fetches the user's uid based on Twitter user id.
  @function fetchUserUidByTwitter
  @param {String} userId Twitter's user id.
  @throws new Error("Twitter user_id not found");
  @instance
  @memberof User
  @example
    var user = Built.App('api_key').User();
    user.fetchUserUidByTwitterUserId('abc123')
      .then(function(user){
        // do something here
      });
  @return {Promise<User>}
*/
module.exports.fetchUserUidByTwitterUserId = R.curry(function(user_id,user){
   if(!user_id)
    throw new Error('User_id not found');
  return fetchUserByParameter('tibbr','user_id',user_id,user);
});
instanceMethodBuilder.define('fetchUserUidByTwitterUserId',2);


function fetchUserByParameter(type,key,parameter,user){
  var retrieveUrl = getUserUrl(user)+'/retrieve_user_uid';
  var authObject = keyValue('auth_data',keyValue(type,keyValue(key,parameter)));
  var entity = {
    'application_user':object.assign(authObject,user).data
  }
  var adaptor       = user.app.options.adaptor;
  var requestObject = utility.getAdaptorObj('POST',retrieveUrl,module.exports.getCombinedHeaders(user),entity, null);
  return adaptor.makeCall(requestObject).then(function(response) {
    return user.cls.ObjectCons(module.exports.getHeaders(user),{},{},response.entity.uid);
  });
}
/**
  Registers the user on built.io.
  @function register
  @param {String} email Valid email address
  @param {String} password Valid password
  @param {String} password_confirm Valid password
  @instance
  @fires user:register event of {@link Events}
  @memberof User

  @example
    var user = Built.App('api_key').User();
    user.register("test@email.com","password","password")
      .then(function(user) {
        // do something here
      });
  @return {Promise<User>}
*/
module.exports.register = R.curry(function(email, password, password_confirmation, user) {
  var authObject = {
    email: email,
    password: password,
    password_confirmation: password_confirmation
  };
  var entity = {
    "application_user": object.assign(authObject, user).data
  };
  return makeCallHelper('POST', getUserUrl(user), entity, user).then(function(response){
    Events.trigger('user:register',response);
    return response;
  });
})
instanceMethodBuilder.define('register',4);

/**
  Places a reset password request which will send a email to the given email address
  @function forgotPassword
  @param {String} email Valid email address.
  @instance
  @memberof User
  @example
    var user = Built.App('api_key').User();
    user.forgotPassword('test@email.com')
      .then(function(){
        // do something here
      });
  @return {Promise<User>}
*/
module.exports.forgotPassword = R.curry(function(email, user) {
  var adaptor = user.app.options.adaptor;
  var authObject = {
    email: email
  };
  var entity = {
    "application_user": object.assign(authObject, user).data
  };
  var url = getUserUrl(user) + '/forgot_password/request_password_reset';
  var requestObject = utility.getAdaptorObj('POST', url, module.exports.getCombinedHeaders(user), entity, null);
  return adaptor.makeCall(requestObject).then(function(response) {
    return null;
  });
})
instanceMethodBuilder.define('forgotPassword',2);

/**
  Use this method to reset application user's password.
  @function resetPassword
  @param {String} password New password.
  @param {String} confirmPassword Same password for confirmation.
  @param {String} resetToken Reset token received on forgot password request.
  @instance
  @memberof User
  @example
    var user = Built.App('api_key').User();
    user.resetPassword('abc123', 'abc123', 'bltadummy390b5fbb4e')
      .then(function(){
        // do something here
      });
  @return {Promise<null>}
*/
module.exports.resetPassword = R.curry(function(password, confirm_password, resetPassToken, user){
  var adaptor  = user.app.options.adaptor;
  var resetObj = {
    reset_password_token  : resetPassToken,
    password              : password,
    password_confirmation : confirm_password
  }
  var entity = {
    "application_user": object.assign(resetObj, user).data
  }
  var url           = getUserUrl(user) + '/forgot_password/reset_password';
  var requestObject = utility.getAdaptorObj('POST', url, module.exports.getCombinedHeaders(user), entity, null);
  return adaptor.makeCall(requestObject).then(function(response) {
    return null;
  });
})
instanceMethodBuilder.define('resetPassword', 4);
/**
  Updates the user profile
  @function updateUserProfile
  @param {Object} updateObject Javascript object containing updated values.
  @instance
  @memberof User
  @throws new Error('Uid not found');
  @example
    var user = Built.App('api_key').User('bltba9a44506dd9e741');
    user.updateUserProfile({
      email      : "john@email.com",
      first_name : "john",
      last_name  : "joseph",
      })
      .then(function(user) {
        //do something here
      });
  @return {Promise<User>}
*/
module.exports.updateUserProfile = R.curry(function(userInfo, user) {
  var entity = {
    "application_user": userInfo
  };
  if (!user.get('uid'))
    return when.reject(new Error('Uid not found'));
  var url = getUserUrl(user);
  var adaptor       = user.app.options.adaptor;
  var requestObject = utility.getAdaptorObj('PUT', url, module.exports.getCombinedHeaders(user), entity, null);
  return adaptor.makeCall(requestObject).then(function(response) {
    var tmpUser   = user.cls.ObjectCons(module.exports.getHeaders(user),{}, R.mixin({authtoken:user.get('authtoken')},response.entity.application_user),{}); 
    tmpUser = tmpUser.set('authtoken', user.get('authtoken')); 
    tmpUser.app.setSession(tmpUser.toJSON());
    return tmpUser
  });;
})
instanceMethodBuilder.define('updateUserProfile',2);
/**
  Does a federated login via Google
  @function loginWithGoogle
  @param {String} access_token Access token from Google
  @instance
  @memberof User
  @fires user:login event of {@link Events}
  @example
    var user = Built.App('api_key').User();
    user.loginWithGoogle('ya29.AHES6ZSvSaMpLeToKeNVowjHEZrJA_J0k8')
      .then(function(user){
        //do something here
      });
  @return {Promise<User>}
*/
module.exports.loginWithGoogle = R.curry(function(access_token, user) {
  var authObject = {
    "auth_data": {
      "google": {
        access_token: access_token
      }
    }
  };
  return OAuthLoginHelper(authObject, user);
})
instanceMethodBuilder.define('loginWithGoogle',2);
/**
  Does a federated login via Facebook
  @function loginWithFacebook
  @param {String} access_token Access token from Facebook
  @instance
  @memberof User
  @fires user:login event of {@link Events}
  @example
    var user = Built.App('api_key').User();
    user.loginWithFacebook('ya29.AHES6ZSvSaMpLeToKeNVowjHEZrJA_J0k8')
      .then(function(user){
        // dp something here
      });
  @return {Promise<User>}

*/
module.exports.loginWithFacebook = R.curry(function(access_token, user) {
  var authObject = {
    "auth_data": {
      "facebook": {
        access_token: access_token
      }
    }
  };
  return OAuthLoginHelper(authObject, user);
})
instanceMethodBuilder.define('loginWithFacebook',2);
/**
  Does a federated login via Tibbr
  @function loginWithTibbr
  @param {String} access_token Access token from Tibbr
  @param {String} hostname The host or endpoint of the tibbr installation
  @instance
  @fires user:login event of {@link Events}
  @memberof User
  @example
    var user = Built.App('api_key').User();
    user.loginWithTibbr('ya29.AHES6ZSvSaMpLeToKeNVowjHEZrJA_J0k8','https://try.tibbr.com')
      .then(function(user){
        // dp something here
      });
  @return {Promise<User>}
*/
module.exports.loginWithTibbr = R.curry(function(access_token, hostname, user) {
  var authObject = {
    "auth_data": {
      "tibbr": {
        access_token: access_token,
        hostname: hostname
      }
    }
  };
  return OAuthLoginHelper(authObject, user);
})
instanceMethodBuilder.define('loginWithTibbr',3);
/**
  Does a federated login via Twitter
  @function loginWithTwitter
  @param {String} token  Token from Twitter used to identify user
  @param {String} token_secret Secret Token from Twitter used to identify user
  @param {String} consumer_key Consumer key used to identify application
  @param {String} consumer_secret Consumer secret key used to identify application
  @instance
  @fires user:login event of {@link Events}
  @memberof User
  @example
    var user = Built.App('api_key').User();
    user.loginWithTwitter('ya29.AHES6ZSvSaMpLeToKeNVowjHEZrJA_J0k8','aMpLeToKeNVowjHEZrJA_J0k8','aMpLeToKeNVowjHEZrJA_J0k8kjfs78','aMpLeToKeNVowjHEZrJA_J0kfd878')
      .then(function(user){
        // do something here
      });
  @return {Promise<User>}
*/
module.exports.loginWithTwitter = R.curry(function(token, token_secret, consumer_key, consumer_secret, user) {
  var authObject = {
    "auth_data": {
      "twitter": {
        token: token,
        token_secret: token_secret,
        consumer_key: consumer_key,
        consumer_secret: consumer_secret
      }
    }
  };
  return OAuthLoginHelper(authObject, user);
})
instanceMethodBuilder.define('loginWithTwitter',5);

function OAuthLoginHelper(authObject, user) {
  var entity = {
    "application_user": object.assign(authObject, user).data
  };
  var url = getUserUrl(user);
  return makeCallHelper('POST', url, entity, user).then(function(user){
    Events.trigger('user:login');
    user.app.setSession(user.toJSON());     //sets session of logged in user
    return user;
  });
}

function makeCallHelper(method, url, entity, user) {
  var adaptor       = user.app.options.adaptor;
  var requestObject = utility.getAdaptorObj(method, url, module.exports.getCombinedHeaders(user), entity, null);
  return adaptor.makeCall(requestObject).then(function(response) {
    return user.cls.ObjectCons(module.exports.getHeaders(user),{},response.entity.application_user,{});
  });
}

function getUserUrl(user) {
  var Built = require('./built');
  var app   = user.app;
  var url;
  if(getData(user).uid)
    url = Built.App.getURL(app) + USER_PATH + '/' + getData(user).uid;
  else
    url = Built.App.getURL(app) + USER_PATH;
  return url;
}
/*
  The reason for a special function for logout url is that loginedUser 
  consist of a uid so getUserUrl generated a url ending with /uid 
  whereas for logout the url is application/users/logout
*/
function getLogoutUrl(user){                        
  return  user.app.getURL() + USER_PATH + '/logout';
}

function getOptions(app) {
  return app.options;
}

function getData(user){
  return user.data;
}

function getDelta(user) {
  return user.delta;
}

function keyValue(key,value){
  var obj  = {};
  obj[key] = value;
  return obj;
}

