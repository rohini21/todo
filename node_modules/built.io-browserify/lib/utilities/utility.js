/*
  This method iteratively copies properties/methods from one object to other
  param | copyTo |  Target object
  param | copyFrom |  Source object
*/  
module.exports.copyProperties = function(copyTo, copyFrom) {
  for (method in copyFrom) {
    copyTo[method] = copyFrom[method]
  };
}

/*
  This method construct a object as per REST framework  
  param | method |    Http method (PUT,POST,DELETE,GET)
  param | path   |    URL
  param | header |    Http headers
  param | entity |    Payload (Request body)
  param | params |    URL params
*/
module.exports.getAdaptorObj = function(method, path, headers, entity, params) {
  if (!method) {
    throw new Error('Http method is not specified');
  }
  if (!path) {
    throw new Error('Path for http request not specified');
  }
  if (!headers) {
    throw new Error('Headers for http request not specified');
  }
  var adapterObj      = {};
  adapterObj.path     = path;
  adapterObj.headers  = headers;
  adapterObj.method   = method;

  if (entity) {
    adapterObj.entity = entity;
  }
  if (params) {
    adapterObj.params = params;
  }
  return adapterObj;
}
/*
  This method takes a function and if it is passed arguments it is called with those 
  arguments and if not,it calls the function with default arguments.
  param | fn            | The function to be wrapped
  param | defaultValues | The default values with which it should be called with
*/
module.exports.wrapper = function(fn,defaultValues){    // This function is already called by us so the closured function has access to this parameters
  return function(){                                    // The function is returned for execution    
    var args  = Array.prototype.slice.call(arguments, 0);
    args      = args.concat(defaultValues.slice(-(fn.length-arguments.length)));
    return fn.apply(this,args);
  }
}

/*
  This method is used to check if a variable is array
  param | array | The variable to be checked
*/
module.exports.isArray = function(obj){
  return Object.prototype.toString.call(obj) === '[object Array]'
}

module.exports.isNumber = function(variable){
  return typeof variable === "number";
}

module.exports.isBoolean = function(variable){
 return typeof variable === "boolean"; 
}

module.exports.isString = function(variable){
  return typeof variable === "string";
}

module.exports.isQueryInstance = function(query){
  return !! query.where;
}

module.exports.isFunction = function(functionToCheck) {
 var obj = {};
 return functionToCheck && obj.toString.call(functionToCheck) === '[object Function]';
}

/*
  This method is used to check if a variable is a JavaScript Object
  param | object | The variable to be checked
*/
module.exports.isObject = function(variable){
  return typeof variable === "object";
}

/*
  This method is used to check if code is running browser

*/ 
module.exports.isBrowser = function(){  //temp implementation
   return !! (typeof window != 'undefined' && window.document);
}

module.exports.isLocalStroageAvaliable = function(){  //temp implementation
   return !! (typeof localStorage != 'undefined');
}

/*
  This method is used to check if the obj passed in a empty object ({})

*/
module.exports.isEmpty = function(obj){
  if(obj)
  return Object.keys(obj).length === 0; 
}
/*
  This method can be used to make object hierarchy dyanmically 
  @example
  var obj = keyValue("person",keyValue('age',10));
  {
    person:{
      age:10
    }
  }
*/
module.exports.keyValue = function() {
  var lastKey = null
  var result = {}

  for (var i = 0; i < arguments.length; i++) {
    var elem = arguments[i]
    if ((i % 2) === 0) {
      lastKey = elem
    } else {
      result[lastKey] = elem
    }
  }

  return result
}

module.exports.backboneExist = function(){
  return !!(typeof Backbone !== "undefined" && Backbone.Model && Backbone.Collection)
}

module.exports.supportsFormData = function(){
    return !! (typeof window === "object" && typeof window.FormData !=="undefined");
}

var encodeParam = module.exports.encodeParam = function(property, object) {
  if (module.exports.isObject(object[property])) {
    return property+"="+encodeURIComponent(JSON.stringify(object[property]));
  }else{
    return property+"="+object[property];
  }
}

module.exports.addParam = function(path, property, object) {
  if (path.indexOf("?") >= 0) {
    path += "&" + encodeParam(property, object);
  } else {
    path += "?" + encodeParam(property, object);
  }
  return path;
}



