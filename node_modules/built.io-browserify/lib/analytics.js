var R                     = require('ramda');
var utility               = require('./utilities/utility');
var instanceMethodBuilder = require('./utilities/instanceMethodBuilder')();

/*
  Constants
*/
var singleEvent   = '/trigger'; 
var multipleEvent = '/events/trigger_multiple';


/**
  @class Analytics.Event
  @classdesc
    Use Analytics.Event to trigger a event on built.io.
  @description
    Represents an analytics event
  @param {string|object} uid The uid of the event, or initial values for the event.
  @example
    var Event = Built.App('api_key').Analytics.Event;

    //Constructor accepting event uid as argument.
    var event = Event('event1');

    // Constructor accepting inital properties as argument.
    var event = Event({
      username:'ABC';
    });
    event = event.setUid('event2');
  @return {Event}
*/

var eventCons = module.exports = R.curry(function(app,headers,uid,properties){
 var returnObj = {
 	app:app,
 	headers:headers,
  uid:uid,
 	properties:properties
 }
  return instanceMethodBuilder.build(module.exports,returnObj);
});

var getHeaders = module.exports.getHeaders = function(event){
	return event.headers;
}
instanceMethodBuilder.define('getHeaders',1);

/**
  Gets the properties object assigned to this event
  @function getProperties
  @instance
  @memberof Analytics.Event
  @example
    var event      = Built.App('api_key').Analytics.Event('event1');
    var properties = event.getProperties();
  @return {object}
*/
var getProperties = module.exports.getProperties = function(event){
  return event.properties;
}
instanceMethodBuilder.define('getProperties',1);

/**
  Returns the Uid of this event
  @function getUid
  @instance
  @memberof Analytics.Event
  @example
    var event = Built.App('api_key').Analytics.Event('event1');
    var uid   = event.getUid();
  @return {String}
*/
var getUid = module.exports.getUid = function(event){
  return event.uid;
}
instanceMethodBuilder.define('getUid',1);

/**
  Assigns a uid to the event
  @function setUid
  @instance
  @memberof Analytics.Event
  @param {String} uid Uid for the event
  @example
    var event = Built.App('api_key').Analytics.Event({
      username:'ABC'
    });
    event     = event.setUid('event1');
  @return {String}
*/
module.exports.setUid = R.curry(function(uid,event){
  return eventCons(event.app,event.headers,uid,event.properties);
});
instanceMethodBuilder.define('setUid',2);

var getCombinedHeaders = module.exports.getCombinedHeaders = function(event){
 var app 						= event.app;
 var appHeaders 		= app.getHeaders();
 var combinedHeader = R.mixin(appHeaders,event.getHeaders());
 return combinedHeader; 
}
instanceMethodBuilder.define('getCombinedHeaders',1);

var setPropertiesHelper = R.curry(function(key,value,event){
  if(value instanceof Date){
    value = value.toISOString();
  }
  var newProperties     = getMixinedProperties(event);
  newProperties[key]    = value;
  return eventCons(event.app,event.headers,event.uid,newProperties);
});

/**
  Assigns properties to the event which are nothing but data you want to send along with the event.
  @function setProperties
  @param {object} props Plain JavaScript object containing properties
  @instance
  @memberof Analytics.Event
  @example
    var event = Built.App('api_key').Analytics.Event('event1');
    event     = event.setProperties({ // username data is send along with the event
      username:'ABC'
    });
  @return {Event}
*/

module.exports.setProperties = R.curry(function(value,event){
  var newProperties     = R.mixin(value,getMixinedProperties(event));
  return eventCons(event.app,event.headers,event.uid,newProperties);
});
instanceMethodBuilder.define('setProperties',2);
/**
  Assigns a custom created at date.
  @function setCreatedAt
  @param {Date} date The custom date object
  @instance
  @memberof Analytics.Event
  @example
    var event = Built.App('api_key').Analytics.Event('event1');
    event     = event.setCreatedAt(new Date());
  @return {Event}
*/
module.exports.setCreatedAt = setPropertiesHelper('created_at');
instanceMethodBuilder.define('setCreatedAt',2);
/**
  Assigns previous event uid for the event. This should be used when you want to know something like event2 was fired after event1 
  which can be achieved by setting event2's previous event uid to 'event1' 
  @function setPreviousEventUid
  @param {String} uid Uid of another event
  @instance
  @memberof Analytics.Event
  @example
    var event2 = Built.App('api_key').Analytics.Event('event2');
    event2     = event.setPreviousEventUid('event1');
  @return {Event}
*/
module.exports.setPreviousEventUid = setPropertiesHelper('previous_event_uid');
instanceMethodBuilder.define('setPreviousEventUid',2);

/**
  Triggers this event on built.io.
  @function trigger
  @instance
  @memberof Analytics.Event
  @example
    var event  = Built.App('api_key').Analytics.Event('event1');
    event.trigger()
      .then(function(event){
        // Returns the same event. 
      });
  @return {Promise<Event>}
*/
module.exports.trigger = R.curry(function(event){
  var keyValue      = utility.keyValue;
  var mixinedProps  = R.mixin(event.app.getEventProperties(),event.getProperties())
	var entity 				= keyValue('event',keyValue('properties', mixinedProps));
	var adaptor 			= event.app.options.adaptor;
	var requestObject = utility.getAdaptorObj('POST',getURL(event,false),getCombinedHeaders(event),entity,null); 
	return adaptor.makeCall(requestObject).then(function(response){
		return eventCons(event.app,event.headers,event.getUid(),event.getProperties());
	});
});
instanceMethodBuilder.define('trigger',1);

/**
  Fires a http request which triggers all the events that were passed.
  @function triggerMultiple
  @static
  @memberof Analytics.Event
  @param {Array} array Array of event objects.
   @example
    var Event  = Built.App('api_key').Analytics.Event;
    var event1 = Event('event1');
    var event2 = Event('event2');
    var event3 = Event('event3');
    Event.triggerMultiple([event1,event2,event3])
      .then(function(array){
        // Same event array is returned again
      })
  @return {Array}
*/
module.exports.triggerMultiple = R.curry(function(eventArray){
	var singleEvent;											//for getting app instance required to generate url
  var keyValue = utility.keyValue;
	if(utility.isArray(eventArray)){ 
		if(eventArray.length > 0){
			 singleEvent = eventArray[0]; 			
		}else{
			throw new Error('Events array is empty');
		}
	}
	var entity				= R.mixin(keyValue('events',constructEntity(eventArray)),keyValue('super_properties',eventArray[0].app.getEventProperties()));
	var adaptor 			= singleEvent.app.options.adaptor;
	var requestObject = utility.getAdaptorObj('POST',getURL(singleEvent,true),getCombinedHeaders(singleEvent),entity,null); 
	return adaptor.makeCall(requestObject).then(function(response){
		return eventArray;
	});
});
instanceMethodBuilder.define('triggerMultiple',1);

function constructEntity (eventArray) {
  var multiEventObj = {};
  eventArray.forEach(function(event){
    var eventArray = multiEventObj[event.getUid()] || [];
    eventArray.push(utility.keyValue('properties',event.getProperties()));
    multiEventObj[event.getUid()] = eventArray;
  });
  return multiEventObj;
}

function getURL(event,multiTrigger){ 		
	var app = event.app;
	if(multiTrigger){ // for multiple trigger
		return app.getURL() + multipleEvent;
	}else{
		return app.getURL() +'/events/'+ event.getUid() + singleEvent;
	}
}

function getUid(){
  return event.uid;
}

function getMixinedProperties(event){
 return R.mixin({},getProperties(event))
}